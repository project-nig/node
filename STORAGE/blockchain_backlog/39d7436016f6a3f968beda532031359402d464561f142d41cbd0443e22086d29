{"header": {"previous_block_hash": "84267f4af1ba041ccb5d4691aad12e277e9fd557b0c2c70cc7bb417e683d982f", "current_PoH_hash": "39d7436016f6a3f968beda532031359402d464561f142d41cbd0443e22086d29", "current_PoH_timestamp": 1717152327.575923, "previous_PoH_hash": "block8", "merkle_root": "e2e27f905b95be86b15a96dbcbed1e3627b2968e4a2652758b6f05b1d0d268eb", "timestamp": 1717159527.690977, "noonce": 7305, "slot": 1, "leader_node_public_key_hash": "f6bf165beeb8e1a18210ba69d0705c5ab9a72dd8"}, "PoH": {"PoH_registry_input_data": [["a4e4f81626eeaf773a0e71e87998fa59229499f5b753958c2e154d59cd1cf932", 425814, "fe74eb40dd907b7c83d2d09264ec097d824aa96e4aa4831c820ae57c28b99aec", "6ac7a67d98e392b24d82e72c25dbb3ce99371ff90eb658e5a9c1671771e6e051", 1], ["e8105d1924af201f3d11ee491ce34ce2ee900fc248701f9ca227b2f8e5d4b089", 425816, "973eb976c36169900917563b9f63a68bc5dbd2fb5b4f87a0ad53b91f2fb10d07", "cf47f8e1afb037f00664f5dc95c0bc80e879f3019f149912a5c3b24afddd18fc", 2]], "PoH_registry_intermediary": [[1, "145569288e4b5740d74348702c8f2093605aa6ed5df6b7bc982d0f2cf03ca0c7", 425814, "a4e4f81626eeaf773a0e71e87998fa59229499f5b753958c2e154d59cd1cf932", 1], [425814, "6ac7a67d98e392b24d82e72c25dbb3ce99371ff90eb658e5a9c1671771e6e051", 425816, "e8105d1924af201f3d11ee491ce34ce2ee900fc248701f9ca227b2f8e5d4b089", 2], [425816, "cf47f8e1afb037f00664f5dc95c0bc80e879f3019f149912a5c3b24afddd18fc", 659780, "39d7436016f6a3f968beda532031359402d464561f142d41cbd0443e22086d29", 3]]}, "signature": "91ba52df97badf85c56855eb5bd290f8ed09b0b6afec4119283d914794df439106fbfeaf76d3516917801f6364f50fa9d00a4bef64bbbc9aa3581813fab70ac74b7685d7d541b03ed2453c984017a4fac90494405b94bea0c8d30f0ca4fd14460176de21436689fd10ef5af1ac3b61756bc65b9f392c83c9db006ae47e9059f8489f2b9fe95b63262257faed83ec1800a58e7c954831749d9fa940b6d3b6588f735734ac4d51e0e1f8384b6da8d72d4387417c4f65ccb4eb16948b7fea5e26c945de6e2edf2cdadb1571b7c7c8dba71e2b8cca492fff58d6e6710713ea36311294b806966ac5d226eb32da368b3d1e7dc911197e4582d0a3459a821dc6855a7a", "transactions": [{"timestamp": 1717152315.963381, "inputs": [], "outputs": [{"amount": 0.0, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 0634586749190c84fa9637d047dd2092aba40d17 OP_SC aec5ba6714e89ee409736056d5b4fc9801a7f0bd OP_SC 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_RE", "network": "nig", "account": null, "interface_public_key_hash": "1f8da1bae39c78bf4d8f9f3b8727e50001eed5ae", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "marketplace_transaction_flag": false, "smart_contract_transaction_flag": true, "fee_node": 0, "fee_miner": 0, "smart_contract_sender": "sender_public_key_hash", "smart_contract_new": true, "smart_contract_account": "0634586749190c84fa9637d047dd2092aba40d17", "smart_contract_flag": true, "smart_contract_gas": 999789.7874, "smart_contract_memory": [["Reputation", "reputation", ["nb_transaction", "nb_pos", "nb_neg"], [0, 0, 0]]], "smart_contract_memory_size": 210, "smart_contract_type": "source", "smart_contract_payload": "\n###VERSION:1\n\nclass Reputation:\n    def __init__(self):\n        self.nb_transaction=0\n        self.nb_pos=0\n        self.nb_neg=0\n\n    def get_reputation(self):\n        if self.nb_transaction==0:reliability=0\n        else:reliability=max(0,round(((float(self.nb_pos)-float(self.nb_neg))/float(self.nb_transaction))*100,2))\n        return [self.nb_transaction,reliability]\nreputation=Reputation()\nmemory_list.add([reputation,'reputation',['nb_transaction','nb_pos','nb_neg']])\n", "smart_contract_result": null, "smart_contract_previous_transaction": null}], "transaction_hash": "7e5cf6a1dc150cb3563e81889ee87b264ef8984bd41cc3608b23966975c0bfb6"}, {"timestamp": 1717152316.608396, "inputs": [{"transaction_hash": "1d499fc01f1281da0217540029441fb267b0709e118b2eec036f5c6ecb841b1f", "output_index": 0, "unlocking_script": "9935872a92c856fcce35dbec907e8168a7a2ebf5aefd167ddd9825f194bb8ebd739544d6fd9f0162f73e00333aff9a29b319dd400372e41a75491510f371da632ec0bff5934b5f965a947b5884e1a434956992002a5ca54d20e50b9d2fdcc7b0164aa705496142fca003e33d6180a1ad9934b1e2831a7cc6753bdcbfe60872e428cf0f8891ac7ef46abdd3d4d807a651371fc6f4188311b52e8d736017f5019037cc8157330a92048fa1b7ba951d38272b120b3e2571899d8720f4008ae506f40445f6dc9386dff07d04e0c22bfe7d6e25e655086581ee933e4eb98d6d624aa03f824d455e59038f5e9f95179796b763eec045a20b5f618cdb162b19d87988e3 30820122300d06092a864886f70d01010105000382010f003082010a0282010100b7b3d8a6a6192934167a2e0a48248683c9480e837ce4e92295672aa873d6e81d0cc88cfed757dbb4c9105fc596e14983636898c0a436e091b66d3cc113269e58a08c1c4fc1439f568b0d7ce704f9a8abb5d75d7b3eb22447915e29764c709f3a478dfec64721c72ae1754b523d4bbdc45ce02e2f608f6bc9a6cdbb2f9b97c9723a85c86e5bda7f3d803f805815db4aac1f496568358ae08fdafaed8ff64c83c903ac9fae508b510d61311701a8ab26d9364ee86323f86743cf3373ee7094a1fc446454f9b15d1e875c89b8eeca9bdb4c001bc9bd181f85a7371c1a77a94dd827cb08cb5c892a0a8842a49327a5d5cfa89ca75d74f0ee0f114a612e93e463800d0203010001", "unlocking_public_key_hash": "aec5ba6714e89ee409736056d5b4fc9801a7f0bd", "network": "nig"}], "outputs": [{"amount": 0.0, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC c2fcc2794f9f170ee009b4c539ffb28d3f53ff8f OP_SC aec5ba6714e89ee409736056d5b4fc9801a7f0bd OP_SC 31f2ac8088005412c7b031a6e342b17a65a48d01", "network": "nig", "account": null, "interface_public_key_hash": "1f8da1bae39c78bf4d8f9f3b8727e50001eed5ae", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "marketplace_transaction_flag": true, "smart_contract_transaction_flag": false, "fee_node": 0, "fee_miner": 0, "smart_contract_sender": "aec5ba6714e89ee409736056d5b4fc9801a7f0bd", "smart_contract_new": true, "smart_contract_account": "c2fcc2794f9f170ee009b4c539ffb28d3f53ff8f", "smart_contract_flag": true, "smart_contract_gas": 999771.2676, "smart_contract_memory": [["MarketplaceRequest", "mp_request_step2_done", ["account", "step", "timestamp", "requested_amount", "requested_currency", "requested_deposit", "buyer_public_key_hash", "timestamp_step1", "timestamp_step2", "timestamp_step3", "timestamp_step4", "buyer_public_key_hex", "requested_nig", "timestamp_nig", "seller_public_key_hex", "seller_public_key_hash", "encrypted_account", "buyer_reput_trans", "buyer_reput_reliability", "mp_request_signature", "mp_request_id", "previous_mp_request_name", "mp_request_name", "seller_safety_coef", "smart_contract_ref", "new_user_flag", "reputation_buyer", "reputation_seller"], ["aec5ba6714e89ee409736056d5b4fc9801a7f0bd", 1, 1717152316.559166, 1000.0, "EUR", 0, "aec5ba6714e89ee409736056d5b4fc9801a7f0bd", 1717152316.559166, null, null, null, "30820122300d06092a864886f70d01010105000382010f003082010a0282010100b7b3d8a6a6192934167a2e0a48248683c9480e837ce4e92295672aa873d6e81d0cc88cfed757dbb4c9105fc596e14983636898c0a436e091b66d3cc113269e58a08c1c4fc1439f568b0d7ce704f9a8abb5d75d7b3eb22447915e29764c709f3a478dfec64721c72ae1754b523d4bbdc45ce02e2f608f6bc9a6cdbb2f9b97c9723a85c86e5bda7f3d803f805815db4aac1f496568358ae08fdafaed8ff64c83c903ac9fae508b510d61311701a8ab26d9364ee86323f86743cf3373ee7094a1fc446454f9b15d1e875c89b8eeca9bdb4c001bc9bd181f85a7371c1a77a94dd827cb08cb5c892a0a8842a49327a5d5cfa89ca75d74f0ee0f114a612e93e463800d0203010001", 671.6531, 1717152316.559166, "", "", "", 0, 0, null, 82679162, null, "mp_request_step2_done", 2, "c2fcc2794f9f170ee009b4c539ffb28d3f53ff8f", true, 0, 0]]], "smart_contract_memory_size": 228, "smart_contract_type": "source", "smart_contract_payload": "\n###VERSION:1\n\nclass MarketplaceRequest:\n    def __init__(self):\n        self.account=None\n        self.step=0\n        self.new_user_flag=False\n        self.timestamp=datetime.timestamp(datetime.utcnow())\n        self.timestamp_step1=None\n        self.timestamp_step2=None\n        self.timestamp_step3=None\n        self.timestamp_step4=None\n        self.requested_amount=0\n        self.requested_currency='EUR'\n        self.requested_deposit=0\n        self.requested_nig=0\n        self.requested_nig_step2=None\n        self.requested_nig_step2_flag=False\n        self.timestamp_nig=None\n        self.buyer_public_key_hex=None\n        self.buyer_public_key_hash=None\n        self.buyer_public_key_hash=None\n        self.buyer_reput_trans=0\n        self.buyer_reput_reliability=0\n        self.seller_public_key_hex=\"\"\n        self.seller_public_key_hash=\"\"\n        self.encrypted_account=\"\"\n        self.mp_request_signature=None\n        self.mp_request_id=random.randint(10000000, 99999999)\n        self.previous_mp_request_name=None\n        self.mp_request_name=None\n        self.seller_safety_coef=GET_SELLER_SAFETY_COEF()\n        self.smart_contract_ref=None\n        self.reputation_buyer=0\n        self.reputation_seller=0\n\n    def get_mp_details(self,step):\n        mp_details = [self.timestamp,self.buyer_public_key_hash,self.buyer_public_key_hex,self.requested_amount,self.mp_request_id]\n        if self.requested_nig_step2_flag is True:requested_nig=self.requested_nig_step2\n        else:requested_nig=self.requested_nig\n        if self.step>=1:\n            self.seller_safety_coef=GET_SELLER_SAFETY_COEF()\n            mp_details.extend([requested_nig,self.seller_safety_coef])\n        if self.step>=2:mp_details.extend([self.seller_public_key_hex,self.seller_public_key_hash,self.requested_deposit])\n        if self.step==99:mp_details.append(\"cancellation\")\n        if self.step==66:mp_details.append(\"payment default\")\n        return mp_details\n\n    def get_requested_deposit(self):\n        return self.requested_deposit\n\n    def get_new_user_flag(self):\n        return self.new_user_flag\n\n    def get_reputation(self):\n        if self.reputation_buyer!=0 or self.reputation_seller!=0:return {self.buyer_public_key_hash:self.reputation_buyer,self.seller_public_key_hash:self.reputation_seller}\n        else:return None\n\n    def get_mp_info(self,step,user_public_key_hash):\n        try:step=int(step)\n        except:step=99\n        mp_details=None\n        flag=False\n        readonly_flag=False\n        if self.step!=4 and self.step!=45 and self.step!=66 and self.step!=98 and self.step!=99:\n            if step==1:\n                flag=True\n                if self.buyer_public_key_hash==user_public_key_hash:readonly_flag=True\n            if step==2:\n                if self.buyer_public_key_hash==user_public_key_hash:flag=True\n                if self.step==1:readonly_flag=True\n                if self.step==3:readonly_flag=True\n            if step==3:\n                if self.seller_public_key_hash==user_public_key_hash:flag=True\n                if self.step==2:readonly_flag=True\n            if flag is True:\n                mp_details = {\"timestamp_nig\": self.timestamp,\"requester_public_key_hash\": self.buyer_public_key_hash,\"requester_public_key_hex\": self.buyer_public_key_hex,\"seller_public_key_hash\": self.seller_public_key_hash,\"requested_amount\": self.requested_amount,\"requested_currency\":self.requested_currency,\"requested_nig\": self.requested_nig,\"payment_ref\": self.mp_request_name}\n                mp_details['seller_public_key_hex']=self.seller_public_key_hex\n                mp_details['encrypted_account']=self.encrypted_account\n                mp_details['smart_contract_ref']=self.smart_contract_ref\n                mp_details['readonly_flag']=readonly_flag\n                mp_details['buyer_reput_trans']=self.buyer_reput_trans\n                mp_details['buyer_reput_reliability']=self.buyer_reput_reliability\n                mp_details['step']=self.step\n        return mp_details\n\n    def get_mp_info_archive(self,step):\n        mp_details=None\n        if step==self.step:\n            mp_details = {\"timestamp_nig\": self.timestamp_step4, \"readonly_flag\":False}\n        return mp_details\n\n    def step1(self,mp_request_name,buyer_public_key_hash,buyer_public_key_hex,requested_amount,smart_contract_ref,new_user_flag,buyer_reput_trans,buyer_reput_reliability):\n        if buyer_public_key_hash is not None and 'None' not in buyer_public_key_hash:\n            if self.step==0:\n                self.mp_request_name=mp_request_name\n                self.buyer_public_key_hash=buyer_public_key_hash\n                self.buyer_public_key_hex=buyer_public_key_hex\n                self.requested_amount=requested_amount\n                self.timestamp_nig=datetime.timestamp(datetime.utcnow())\n                self.requested_nig=CONVERT_2_NIG(requested_amount,self.timestamp_nig,self.requested_currency)\n                self.step=1\n                self.smart_contract_ref=smart_contract_ref\n                self.timestamp_step1=datetime.timestamp(datetime.utcnow())\n                if new_user_flag==\"True\" or new_user_flag==\"True\":new_user_flag=True\n                if new_user_flag==\"False\" or new_user_flag==\"False\":\n                    new_user_flag=False\n                    self.requested_deposit=CONVERT_2_NIG(requested_amount,self.timestamp_nig,self.requested_currency)*GET_BUYER_SAFETY_COEF()\n                self.new_user_flag=new_user_flag\n                self.buyer_reput_trans=buyer_reput_trans\n                self.buyer_reput_reliability=buyer_reput_reliability\n            else:raise ValueError('request cannot be confirmed in step 1')\n        else:raise ValueError('Please select a buyer')\n\n    def step2(self,seller_public_key_hash,seller_public_key_hex,encrypted_account,mp_request_signature):\n        if seller_public_key_hash is not None and 'None' not in seller_public_key_hash:\n            if self.step==1:\n                self.seller_public_key_hash=seller_public_key_hash\n                self.seller_public_key_hex=seller_public_key_hex\n                self.timestamp_nig=datetime.timestamp(datetime.utcnow())\n                self.requested_nig_step2=copy.deepcopy(self.requested_nig)\n                self.requested_nig_step2_flag=True\n                self.requested_nig=CONVERT_2_NIG(self.requested_amount,self.timestamp_nig,self.requested_currency)\n                self.encrypted_account=encrypted_account\n                self.mp_request_signature=mp_request_signature\n                self.step=2\n                self.timestamp_step2=datetime.timestamp(datetime.utcnow())\n            else:raise ValueError('request cannot be confirmed in step 2')\n        else:raise ValueError('Please select a seller')\n            \n\n    def step3(self,mp_request_signature):\n        if self.step==2:\n            self.mp_request_signature=mp_request_signature\n            self.step=3\n            self.timestamp_step3=datetime.timestamp(datetime.utcnow())\n        else:raise ValueError('request cannot be confirmed in step 3')\n\n    def step4(self,mp_request_signature):\n        if self.step==3:\n            self.mp_request_signature=mp_request_signature\n            self.step=4\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n            self.reputation_buyer=1\n            self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in step 4')\n\n    def step45(self,mp_request_signature):\n        if self.step==3:\n            self.mp_request_signature=mp_request_signature\n            self.step=45\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n            self.reputation_buyer=-1\n            self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in step 45')\n\n    def check_cancellation(self,mp_request_signature):\n        if self.step<3:\n          self.mp_request_signature=mp_request_signature\n          self.step=99\n          self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n        else:raise ValueError('request cannot be confirmed in cancellation')\n\n    def check_payment_default(self,mp_request_signature):\n        if self.step==3:\n          self.mp_request_signature=mp_request_signature\n          self.step=66\n          self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n          self.reputation_buyer=-1\n          self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in payment default')\n\n    def validate_step(self):\n        signature_decoded = binascii.unhexlify(self.mp_request_signature.encode(\"utf-8\"))\n        if self.step==2 or self.step==4 or self.step==45 or self.step==66:\n            public_key_bytes = self.seller_public_key_hex.encode(\"utf-8\")\n        elif self.step==3 or self.step==99:\n            public_key_bytes = self.buyer_public_key_hex.encode(\"utf-8\")\n        else:\n            raise ValueError(f'request not in predefined step:{self.step}')\n      \n        public_key_object = RSA.import_key(binascii.unhexlify(public_key_bytes))\n        transaction_bytes = json.dumps(self.get_mp_details(self.step), indent=2).encode('utf-8')\n        transaction_hash = SHA256.new(transaction_bytes)\n        pkcs1_15.new(public_key_object).verify(transaction_hash, signature_decoded)\n\n    def check_expiration(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        return self.check_expiration_raw(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,False)\n\n    def validate_expiration(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        return self.check_expiration_raw(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,True)\n\n    def check_expiration_raw(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,error_flag):\n        expiration_flag=False\n        check_now=datetime.timestamp(datetime.utcnow())\n        if self.step==1 and check_now-self.timestamp_step1>MARKETPLACE_STEP1_EXPIRATION:expiration_flag=True\n        if self.step==2 and check_now-self.timestamp_step2>MARKETPLACE_STEP2_EXPIRATION:\n            self.reputation_buyer=-1\n            expiration_flag=True\n        if self.step==3 and check_now-self.timestamp_step3>MARKETPLACE_STEP3_EXPIRATION:\n            self.reputation_seller=-1\n            expiration_flag=True\n        if expiration_flag is True:\n            self.step=98\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n        else:\n            if error_flag is True:ValueError('smart_contract is not expired')\n        return expiration_flag\n\t\t\n    def get_mp_info_and_expiration(self,step,user_public_key_hash,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        mp_info=self.get_mp_info(step,user_public_key_hash)\n        expiration=self.check_expiration(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION)\n        return mp_info,expiration,self.requested_amount,self.step\n\n    def cancel(self,user_public_key_hash,mp_request_signature):\n        if self.step<3 and self.buyer_public_key_hash==user_public_key_hash:\n            CANCEL_SC(self.smart_contract_ref,self.step,mp_request_signature)\n        else:\n            raise ValueError(f'Cancellation not possible in step:{self.step} for user:{user_public_key_hash}')\n\n    def payment_default(self,user_public_key_hash,mp_request_signature):\n        if self.step==3 and self.seller_public_key_hash==user_public_key_hash:\n            PAYMENT_DEFAULT_SC(self.smart_contract_ref,self.step,mp_request_signature)\n        else:\n            raise ValueError(f'payment default not possible in step:{self.step} for user:{user_public_key_hash}')\n\n\r\nmp_request_step2_done=MarketplaceRequest()\nmp_request_step2_done.step1(\"mp_request_step2_done\",\"aec5ba6714e89ee409736056d5b4fc9801a7f0bd\",\"30820122300d06092a864886f70d01010105000382010f003082010a0282010100b7b3d8a6a6192934167a2e0a48248683c9480e837ce4e92295672aa873d6e81d0cc88cfed757dbb4c9105fc596e14983636898c0a436e091b66d3cc113269e58a08c1c4fc1439f568b0d7ce704f9a8abb5d75d7b3eb22447915e29764c709f3a478dfec64721c72ae1754b523d4bbdc45ce02e2f608f6bc9a6cdbb2f9b97c9723a85c86e5bda7f3d803f805815db4aac1f496568358ae08fdafaed8ff64c83c903ac9fae508b510d61311701a8ab26d9364ee86323f86743cf3373ee7094a1fc446454f9b15d1e875c89b8eeca9bdb4c001bc9bd181f85a7371c1a77a94dd827cb08cb5c892a0a8842a49327a5d5cfa89ca75d74f0ee0f114a612e93e463800d0203010001\",1000.0,\"c2fcc2794f9f170ee009b4c539ffb28d3f53ff8f\",\"True\",[0, 0][0],[0, 0][1])\nmp_request_step2_done.account=sender\nmemory_list.add([mp_request_step2_done,mp_request_step2_done.mp_request_name,['account','step','timestamp','requested_amount',\n  'requested_currency','requested_deposit','buyer_public_key_hash','timestamp_step1','timestamp_step2','timestamp_step3','timestamp_step4',\n  'buyer_public_key_hex','requested_nig','timestamp_nig','seller_public_key_hex','seller_public_key_hash','encrypted_account','buyer_reput_trans','buyer_reput_reliability',\n  'mp_request_signature','mp_request_id','previous_mp_request_name','mp_request_name','seller_safety_coef','smart_contract_ref','new_user_flag','reputation_buyer','reputation_seller']])\nmp_request_step2_done.get_requested_deposit()\n", "smart_contract_result": 0, "smart_contract_previous_transaction": null}], "transaction_hash": "ec8d1e949ca379121c3ec6574df88cab6f178261cda6c2518f0973e239718b9e"}, {"inputs": [], "outputs": [{"amount": 1.8, "locking_script": "OP_DUP OP_HASH160 1f8da1bae39c78bf4d8f9f3b8727e50001eed5ae OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "account": null, "interface_public_key_hash": null, "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "fee_node": 0, "fee_miner": 0}], "transaction_hash": "dd02eaa6d0e7f5b11b614e9cd0db11fa9d30479edc8e06c030185fdfa28db81f", "timestamp": 1717152327.686944}, {"inputs": [], "outputs": [{"amount": 1.2, "locking_script": "OP_DUP OP_HASH160 183e3d96b5b818841bd95ce36635afcc423b5639 OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "account": null, "interface_public_key_hash": null, "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "fee_node": 0, "fee_miner": 0}], "transaction_hash": "763006926fe3157b5763a1137fefa3aca743878550c7a27ef66bfdb8951d3bd6", "timestamp": 1717152327.686944}, {"inputs": [], "outputs": [{"amount": 3.0, "locking_script": "OP_DUP OP_HASH160 9c7ce20e85b7aaf7986ec311ffce647e07081233 OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "account": null, "interface_public_key_hash": null, "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "fee_node": 0, "fee_miner": 0}], "transaction_hash": "d112b3c2b4dfcecda3e1dd5b91a846ceef46fb2f445ea97b207b40f85ba7d798", "timestamp": 1717152327.686944}, {"inputs": [], "outputs": [{"amount": 0.0, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 39d7436016f6a3f968beda532031359402d464561f142d41cbd0443e22086d29", "network": "nig", "account": null, "interface_public_key_hash": null, "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "marketplace_transaction_flag": false, "smart_contract_transaction_flag": true, "fee_node": 0, "fee_miner": 0, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_new": true, "smart_contract_account": "39d7436016f6a3f968beda532031359402d464561f142d41cbd0443e22086d29", "smart_contract_flag": true, "smart_contract_gas": 999772.0, "smart_contract_memory": [["BlockVote", "block_vote", ["block_PoH", "vote_list", "slash_list", "validated"], ["39d7436016f6a3f968beda532031359402d464561f142d41cbd0443e22086d29", [], [], null]]], "smart_contract_memory_size": 228, "smart_contract_type": "source", "smart_contract_payload": "block_PoH=\"39d7436016f6a3f968beda532031359402d464561f142d41cbd0443e22086d29\"\n\n###VERSION:1\n###END\nclass BlockVote:\n    def __init__(self,block_PoH):\n        self.block_PoH=block_PoH\n        self.vote_list=[]\n        self.slash_list=[]\n        self.validated=None\n\n    def check_vote(self,node):\n        if node in self.vote_list or node in self.slash_list or self.validated is True or self.validated is False:return False\n        else:return True\n\n    def vote(self,node):\n        if node not in self.vote_list:self.vote_list.append(node)\n        if node in self.slash_list:self.slash_list.remove(node)\n\n    def slash(self,node):\n        if node not in self.slash_list:self.slash_list.append(node)\n        if node in self.vote_list:self.vote_list.remove(node)\n\n    def vote_ratio(self):\n        total=len(self.vote_list)+len(self.slash_list)\n        self.ratio=0\n        if total>0:\n            ratio_vote=float(len(self.vote_list)/total)\n            ratio_slash=float(len(self.slash_list)/total)\n            if ratio_vote>ratio_slash:self.ratio=ratio_vote\n            if ratio_vote<ratio_slash:self.ratio=-ratio_slash\n        return self.ratio\n        \n    def validate(self,node):\n        self.vote_ratio()\n        total_vote=len(self.vote_list)+len(self.slash_list)\n        if self.ratio>=0.66 and total_vote>=2:self.validated=True\n        if self.ratio<=0.66 and total_vote>=2:self.validated=False\n        return self.validated\n\n    def is_validated(self,node):\n        return self.validated\n\nblock_vote=BlockVote(block_PoH)\nmemory_list.add([block_vote,'block_vote',['block_PoH','vote_list','slash_list','validated']])\n123456\n", "smart_contract_result": 123456, "smart_contract_previous_transaction": null}], "transaction_hash": "4231913861157dcd0b58e1944f51d3a349a696ace235a7f36c1cca33c8c1c7a5", "timestamp": 1717152328.232318}]}