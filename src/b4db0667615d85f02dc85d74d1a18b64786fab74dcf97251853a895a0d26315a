{"header": {"previous_block_hash": "0002972cb60568897ce45383e58a0f9d48cd1859e6fccaaf1a4d95636fd65fdf", "current_PoH_hash": "b4db0667615d85f02dc85d74d1a18b64786fab74dcf97251853a895a0d26315a", "current_PoH_timestamp": 1717616849.521531, "previous_PoH_hash": "0f529e342c4907ca8edd505ac89fe3bb0b86e06b75501de88036d464c596fe8f", "merkle_root": "350a1302fc74d8d31e914eb751573814d78b63636a141ac1de4a300dcc786ca5", "timestamp": 1717624049.686189, "noonce": 1802, "slot": 83, "leader_node_public_key_hash": "f6bf165beeb8e1a18210ba69d0705c5ab9a72dd8"}, "PoH": {"PoH_registry_input_data": [["4fac525da16020a097c3da35d8629f3a2831563098c67a616ee6589889a1ebb1", 4, "b0da6f13426d59c79cb0c8c6b33d5de3e65911268f5dc307044943643238cd8a", "b3724e453b1726b8cdb006c6e991b6cc979faffe99eba2d6fb7c89e1da360228", 1], ["5d7f026ef661c02ef0d8cf2848ecb9842f2a19b3e04567cc15d4686a792108a4", 6, "faff9383050c326a745647d0c6e6ed9110a68f3f8d670151deda97df5bc13904", "c2f790b99acf42e0409630904c09ed86523d57c6055cb873972a2d60c9556272", 2], ["faa21e69aa8571c5915646d5bd3da960b328c001618056485e49ffa96a6c187d", 8, "015e850c0b46f7ca2e96e43e538dc39d68c8a8dd9dfa6f771851d655718261c0", "3b6a4ef3e0411a33fa5f16e80eb8f08d49b7772881e8b1b496466569f6f9c4f0", 3], ["0f158bc2316e11df852ce1b7c93ab4623c2fd2ed364db23674279f6665045d6c", 10, "49abbc58de772a9be312341fcd4254a0630cca09c2a44034eeef09b8f3c0c002", "13d4fa2083d464c2241bc5572a00464f78054dabef841743430bd01c100212a5", 4], ["60eb785f40e254b807c57c34654e93305eb8a9a6ce33fa39603b4f2c938d4713", 12, "0c3362fa9458039256a86af90e419d938135ab70f1c1de29e02d93ff21cf8444", "05f6edc984599aac523af3df1aadce9e0260ffe2becdf93bf9c917a508a66167", 5]], "PoH_registry_intermediary": [[1, "c733c8a2b815442ab359590ff7ae8b900b9bf1a68ff638d2601c5ab421c334ff", 4, "4fac525da16020a097c3da35d8629f3a2831563098c67a616ee6589889a1ebb1", 1], [4, "b3724e453b1726b8cdb006c6e991b6cc979faffe99eba2d6fb7c89e1da360228", 6, "5d7f026ef661c02ef0d8cf2848ecb9842f2a19b3e04567cc15d4686a792108a4", 2], [6, "c2f790b99acf42e0409630904c09ed86523d57c6055cb873972a2d60c9556272", 8, "faa21e69aa8571c5915646d5bd3da960b328c001618056485e49ffa96a6c187d", 3], [8, "3b6a4ef3e0411a33fa5f16e80eb8f08d49b7772881e8b1b496466569f6f9c4f0", 10, "0f158bc2316e11df852ce1b7c93ab4623c2fd2ed364db23674279f6665045d6c", 4], [10, "13d4fa2083d464c2241bc5572a00464f78054dabef841743430bd01c100212a5", 12, "60eb785f40e254b807c57c34654e93305eb8a9a6ce33fa39603b4f2c938d4713", 5], [12, "05f6edc984599aac523af3df1aadce9e0260ffe2becdf93bf9c917a508a66167", 999368, "b4db0667615d85f02dc85d74d1a18b64786fab74dcf97251853a895a0d26315a", 6]]}, "signature": "1267e130ca3e53867cbdcceda7c6685bb8fde54826c526e318b671cb817aaf6c39c4bd6efa1ee65ea66366422bbc5417d2e2ca1badbab82876288d54eb050bd1ea1cb80abe3823ad6126a783ac84eb6cfa3f5710d55c08acccf2e8092eb80a836ce802a356204c3c442c0fc8c41d0836b9c1d30c852d14b87e6c5e6e3747c046295c2e49e4ac4275962a0dba4c113f3f722d7ce41614ce61f8a67c27d2c8b04d302f81cbb850d737152ea4c05f4f17b2048c613c8267ab9413fb603f747c5fc72b6f245c866f1706900e3f1be6f79f4dca19719341e0f074d5a3bb02c74d659c3f15f321a5047ef42b15f1b1e0e0ba8458210cd7df83e8412e33f0db297e664b", "transactions": [{"timestamp": 1717616837.895427, "inputs": [{"transaction_hash": "858ff8700a71aedda591caf81c52b60add7032cc971c69223e247dc5cec81c53", "output_index": 1, "unlocking_script": "07b609852a55dbc183ec1b1cf09193ba9cafb390fa23c3224cea014352649ff1c0beb87b8a0839f64e5c10626a5998de860e3bd1434793cbe5e4f18db03b366ef85b2f9b8c0e7b43d2d715d9c649b61225db272586ffc1560cecb2c75be14158ea68a94113237f7bdfc05dc7b4a46e6d21effee45ea1448ef6ff1d7c0dcb2b1ca59c80ca7771a9376e664b0f2825a8097a6c6932cd239bf53f3870dcb5746212dfa02bea3e915bbf1e31fee5410a0e93a7c06c6c2d2031cf40aba98e468bc2ad0597fdae7999250328564e4f4edfbeb4e311f6ab97f2a20b80c0b0afa739fc37994cd4f5c8d2a09e5ac7018b079394648294eb7a45d652615ed1b4581b6039a7 30820122300d06092a864886f70d01010105000382010f003082010a02820101009fc670b185e40766791306b5d4c03bd046fd6bede5cf4473ebf84a770242f9c11827b20ae9370d80ca8d0107b9a819bced5dff3416e3d7daa7bf4c4b37b1645c229e7a02aad01a24de5bda3e0fd0041fd2e0c2c8112bb282262dc185ee9bcbe607bb34821e8571e6f1f29709bd8e6dba69e451ac9f14e0ec3aaa2d603d1f81dd2c631c7faada5b53ff9c2f63aabbf91ef7f8446dac89c8fc3b9ab942ce894f0b90ad985dde4bfffa61617a64313cb97ee59fa045091c7c1d11ce2fbc3d1b39a62cc3157f974c66ffadc90b82425a4d135e1c1b26d744d9775910125aa07f6a8af659f271cbc3ed4c6121b3af0e14f746bdb5434a2a8620fd736bab3c77678a0d0203010001", "unlocking_public_key_hash": "c808db0baca648f050cd472a86fed847979d8c4b", "network": "nig"}], "outputs": [{"amount": 63.9055, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 679c3dd4c699121bdceaf206891c0ab23734378c OP_SC c808db0baca648f050cd472a86fed847979d8c4b OP_SC 31f2ac8088005412c7b031a6e342b17a65a48d01", "network": "nig", "account": null, "interface_public_key_hash": "1f8da1bae39c78bf4d8f9f3b8727e50001eed5ae", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "marketplace_transaction_flag": true, "smart_contract_transaction_flag": false, "fee_node": 0, "fee_miner": 0, "smart_contract_sender": "c808db0baca648f050cd472a86fed847979d8c4b", "smart_contract_new": true, "smart_contract_account": "679c3dd4c699121bdceaf206891c0ab23734378c", "smart_contract_flag": true, "smart_contract_gas": 999755.234, "smart_contract_memory": [["MarketplaceRequest", "mp_request_step2_done", ["account", "step", "timestamp", "requested_amount", "requested_currency", "requested_deposit", "buyer_public_key_hash", "timestamp_step1", "timestamp_step2", "timestamp_step3", "timestamp_step4", "buyer_public_key_hex", "requested_nig", "timestamp_nig", "seller_public_key_hex", "seller_public_key_hash", "encrypted_account", "buyer_reput_trans", "buyer_reput_reliability", "mp_request_signature", "mp_request_id", "previous_mp_request_name", "mp_request_name", "seller_safety_coef", "smart_contract_ref", "new_user_flag", "reputation_buyer", "reputation_seller"], ["c808db0baca648f050cd472a86fed847979d8c4b", 1, 1717616837.50075, 100.0, "EUR", 63.9055, "c808db0baca648f050cd472a86fed847979d8c4b", 1717616837.500858, null, null, null, "30820122300d06092a864886f70d01010105000382010f003082010a02820101009fc670b185e40766791306b5d4c03bd046fd6bede5cf4473ebf84a770242f9c11827b20ae9370d80ca8d0107b9a819bced5dff3416e3d7daa7bf4c4b37b1645c229e7a02aad01a24de5bda3e0fd0041fd2e0c2c8112bb282262dc185ee9bcbe607bb34821e8571e6f1f29709bd8e6dba69e451ac9f14e0ec3aaa2d603d1f81dd2c631c7faada5b53ff9c2f63aabbf91ef7f8446dac89c8fc3b9ab942ce894f0b90ad985dde4bfffa61617a64313cb97ee59fa045091c7c1d11ce2fbc3d1b39a62cc3157f974c66ffadc90b82425a4d135e1c1b26d744d9775910125aa07f6a8af659f271cbc3ed4c6121b3af0e14f746bdb5434a2a8620fd736bab3c77678a0d0203010001", 63.9055, 1717616837.50079, "", "", "", 5, 100.0, null, 11871361, null, "mp_request_step2_done", 2, "679c3dd4c699121bdceaf206891c0ab23734378c", false, 0, 0]]], "smart_contract_memory_size": 244, "smart_contract_type": "source", "smart_contract_payload": "\n###VERSION:1\n\nclass MarketplaceRequest:\n    def __init__(self):\n        self.account=None\n        self.step=0\n        self.new_user_flag=False\n        self.timestamp=datetime.timestamp(datetime.utcnow())\n        self.timestamp_step1=None\n        self.timestamp_step2=None\n        self.timestamp_step3=None\n        self.timestamp_step4=None\n        self.requested_amount=0\n        self.requested_currency='EUR'\n        self.requested_deposit=0\n        self.requested_nig=0\n        self.requested_nig_step2=None\n        self.requested_nig_step2_flag=False\n        self.timestamp_nig=None\n        self.buyer_public_key_hex=None\n        self.buyer_public_key_hash=None\n        self.buyer_public_key_hash=None\n        self.buyer_reput_trans=0\n        self.buyer_reput_reliability=0\n        self.seller_public_key_hex=\"\"\n        self.seller_public_key_hash=\"\"\n        self.encrypted_account=\"\"\n        self.mp_request_signature=None\n        self.mp_request_id=random.randint(10000000, 99999999)\n        self.previous_mp_request_name=None\n        self.mp_request_name=None\n        self.seller_safety_coef=GET_SELLER_SAFETY_COEF()\n        self.smart_contract_ref=None\n        self.reputation_buyer=0\n        self.reputation_seller=0\n\n    def get_mp_details(self,step):\n        mp_details = [self.timestamp,self.buyer_public_key_hash,self.buyer_public_key_hex,self.requested_amount,self.mp_request_id]\n        if self.requested_nig_step2_flag is True:requested_nig=self.requested_nig_step2\n        else:requested_nig=self.requested_nig\n        if self.step>=1:\n            self.seller_safety_coef=GET_SELLER_SAFETY_COEF()\n            mp_details.extend([requested_nig,self.seller_safety_coef])\n        if self.step>=2:mp_details.extend([self.seller_public_key_hex,self.seller_public_key_hash,self.requested_deposit])\n        if self.step==99:mp_details.append(\"cancellation\")\n        if self.step==66:mp_details.append(\"payment default\")\n        return mp_details\n\n    def get_requested_deposit(self):\n        return self.requested_deposit\n\n    def get_new_user_flag(self):\n        return self.new_user_flag\n\n    def get_reputation(self):\n        if self.reputation_buyer!=0 or self.reputation_seller!=0:return {self.buyer_public_key_hash:self.reputation_buyer,self.seller_public_key_hash:self.reputation_seller}\n        else:return None\n\n    def get_mp_info(self,step,user_public_key_hash):\n        try:step=int(step)\n        except:step=99\n        mp_details=None\n        flag=False\n        readonly_flag=False\n        if self.step!=4 and self.step!=45 and self.step!=66 and self.step!=98 and self.step!=99:\n            if step==1:\n                flag=True\n                if self.buyer_public_key_hash==user_public_key_hash:readonly_flag=True\n            if step==2:\n                if self.buyer_public_key_hash==user_public_key_hash:flag=True\n                if self.step==1:readonly_flag=True\n                if self.step==3:readonly_flag=True\n            if step==3:\n                if self.seller_public_key_hash==user_public_key_hash:flag=True\n                if self.step==2:readonly_flag=True\n            if flag is True:\n                mp_details = {\"timestamp_nig\": self.timestamp,\"requester_public_key_hash\": self.buyer_public_key_hash,\"requester_public_key_hex\": self.buyer_public_key_hex,\"seller_public_key_hash\": self.seller_public_key_hash,\"requested_amount\": self.requested_amount,\"requested_currency\":self.requested_currency,\"requested_nig\": self.requested_nig,\"payment_ref\": self.mp_request_name}\n                mp_details['seller_public_key_hex']=self.seller_public_key_hex\n                mp_details['encrypted_account']=self.encrypted_account\n                mp_details['smart_contract_ref']=self.smart_contract_ref\n                mp_details['readonly_flag']=readonly_flag\n                mp_details['buyer_reput_trans']=self.buyer_reput_trans\n                mp_details['buyer_reput_reliability']=self.buyer_reput_reliability\n                mp_details['step']=self.step\n        return mp_details\n\n    def get_mp_info_archive(self,step):\n        mp_details=None\n        if step==self.step:\n            mp_details = {\"timestamp_nig\": self.timestamp_step4, \"readonly_flag\":False}\n        return mp_details\n\n    def step1(self,mp_request_name,buyer_public_key_hash,buyer_public_key_hex,requested_amount,smart_contract_ref,new_user_flag,buyer_reput_trans,buyer_reput_reliability):\n        if buyer_public_key_hash is not None and 'None' not in buyer_public_key_hash:\n            if self.step==0:\n                self.mp_request_name=mp_request_name\n                self.buyer_public_key_hash=buyer_public_key_hash\n                self.buyer_public_key_hex=buyer_public_key_hex\n                self.requested_amount=requested_amount\n                self.timestamp_nig=datetime.timestamp(datetime.utcnow())\n                self.requested_nig=CONVERT_2_NIG(requested_amount,self.timestamp_nig,self.requested_currency)\n                self.step=1\n                self.smart_contract_ref=smart_contract_ref\n                self.timestamp_step1=datetime.timestamp(datetime.utcnow())\n                if new_user_flag==\"True\" or new_user_flag==\"True\":new_user_flag=True\n                if new_user_flag==\"False\" or new_user_flag==\"False\":\n                    new_user_flag=False\n                    self.requested_deposit=CONVERT_2_NIG(requested_amount,self.timestamp_nig,self.requested_currency)*GET_BUYER_SAFETY_COEF()\n                self.new_user_flag=new_user_flag\n                self.buyer_reput_trans=buyer_reput_trans\n                self.buyer_reput_reliability=buyer_reput_reliability\n            else:raise ValueError('request cannot be confirmed in step 1')\n        else:raise ValueError('Please select a buyer')\n\n    def step2(self,seller_public_key_hash,seller_public_key_hex,encrypted_account,mp_request_signature):\n        if seller_public_key_hash is not None and 'None' not in seller_public_key_hash:\n            if self.step==1:\n                self.seller_public_key_hash=seller_public_key_hash\n                self.seller_public_key_hex=seller_public_key_hex\n                self.timestamp_nig=datetime.timestamp(datetime.utcnow())\n                self.requested_nig_step2=copy.deepcopy(self.requested_nig)\n                self.requested_nig_step2_flag=True\n                self.requested_nig=CONVERT_2_NIG(self.requested_amount,self.timestamp_nig,self.requested_currency)\n                self.encrypted_account=encrypted_account\n                self.mp_request_signature=mp_request_signature\n                self.step=2\n                self.timestamp_step2=datetime.timestamp(datetime.utcnow())\n            else:raise ValueError('request cannot be confirmed in step 2')\n        else:raise ValueError('Please select a seller')\n            \n\n    def step3(self,mp_request_signature):\n        if self.step==2:\n            self.mp_request_signature=mp_request_signature\n            self.step=3\n            self.timestamp_step3=datetime.timestamp(datetime.utcnow())\n        else:raise ValueError('request cannot be confirmed in step 3')\n\n    def step4(self,mp_request_signature):\n        if self.step==3:\n            self.mp_request_signature=mp_request_signature\n            self.step=4\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n            self.reputation_buyer=1\n            self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in step 4')\n\n    def step45(self,mp_request_signature):\n        if self.step==3:\n            self.mp_request_signature=mp_request_signature\n            self.step=45\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n            self.reputation_buyer=-1\n            self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in step 45')\n\n    def check_cancellation(self,mp_request_signature):\n        if self.step<3:\n          self.mp_request_signature=mp_request_signature\n          self.step=99\n          self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n        else:raise ValueError('request cannot be confirmed in cancellation')\n\n    def check_payment_default(self,mp_request_signature):\n        if self.step==3:\n          self.mp_request_signature=mp_request_signature\n          self.step=66\n          self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n          self.reputation_buyer=-1\n          self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in payment default')\n\n    def validate_step(self):\n        signature_decoded = binascii.unhexlify(self.mp_request_signature.encode(\"utf-8\"))\n        if self.step==2 or self.step==4 or self.step==45 or self.step==66:\n            public_key_bytes = self.seller_public_key_hex.encode(\"utf-8\")\n        elif self.step==3 or self.step==99:\n            public_key_bytes = self.buyer_public_key_hex.encode(\"utf-8\")\n        else:\n            raise ValueError(f'request not in predefined step:{self.step}')\n      \n        public_key_object = RSA.import_key(binascii.unhexlify(public_key_bytes))\n        transaction_bytes = json.dumps(self.get_mp_details(self.step), indent=2).encode('utf-8')\n        transaction_hash = SHA256.new(transaction_bytes)\n        pkcs1_15.new(public_key_object).verify(transaction_hash, signature_decoded)\n\n    def check_expiration(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        return self.check_expiration_raw(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,False)\n\n    def validate_expiration(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        return self.check_expiration_raw(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,True)\n\n    def check_expiration_raw(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,error_flag):\n        expiration_flag=False\n        check_now=datetime.timestamp(datetime.utcnow())\n        if self.step==1 and check_now-self.timestamp_step1>MARKETPLACE_STEP1_EXPIRATION:expiration_flag=True\n        if self.step==2 and check_now-self.timestamp_step2>MARKETPLACE_STEP2_EXPIRATION:\n            self.reputation_buyer=-1\n            expiration_flag=True\n        if self.step==3 and check_now-self.timestamp_step3>MARKETPLACE_STEP3_EXPIRATION:\n            self.reputation_seller=-1\n            expiration_flag=True\n        if expiration_flag is True:\n            self.step=98\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n        else:\n            if error_flag is True:ValueError('smart_contract is not expired')\n        return expiration_flag\n\t\t\n    def get_mp_info_and_expiration(self,step,user_public_key_hash,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        mp_info=self.get_mp_info(step,user_public_key_hash)\n        expiration=self.check_expiration(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION)\n        return mp_info,expiration,self.requested_amount,self.step\n\n    def cancel(self,user_public_key_hash,mp_request_signature):\n        if self.step<3 and self.buyer_public_key_hash==user_public_key_hash:\n            CANCEL_SC(self.smart_contract_ref,self.step,mp_request_signature)\n        else:\n            raise ValueError(f'Cancellation not possible in step:{self.step} for user:{user_public_key_hash}')\n\n    def payment_default(self,user_public_key_hash,mp_request_signature):\n        if self.step==3 and self.seller_public_key_hash==user_public_key_hash:\n            PAYMENT_DEFAULT_SC(self.smart_contract_ref,self.step,mp_request_signature)\n        else:\n            raise ValueError(f'payment default not possible in step:{self.step} for user:{user_public_key_hash}')\n\n\r\nmp_request_step2_done=MarketplaceRequest()\nmp_request_step2_done.step1(\"mp_request_step2_done\",\"c808db0baca648f050cd472a86fed847979d8c4b\",\"30820122300d06092a864886f70d01010105000382010f003082010a02820101009fc670b185e40766791306b5d4c03bd046fd6bede5cf4473ebf84a770242f9c11827b20ae9370d80ca8d0107b9a819bced5dff3416e3d7daa7bf4c4b37b1645c229e7a02aad01a24de5bda3e0fd0041fd2e0c2c8112bb282262dc185ee9bcbe607bb34821e8571e6f1f29709bd8e6dba69e451ac9f14e0ec3aaa2d603d1f81dd2c631c7faada5b53ff9c2f63aabbf91ef7f8446dac89c8fc3b9ab942ce894f0b90ad985dde4bfffa61617a64313cb97ee59fa045091c7c1d11ce2fbc3d1b39a62cc3157f974c66ffadc90b82425a4d135e1c1b26d744d9775910125aa07f6a8af659f271cbc3ed4c6121b3af0e14f746bdb5434a2a8620fd736bab3c77678a0d0203010001\",100.0,\"679c3dd4c699121bdceaf206891c0ab23734378c\",\"False\",[5, 100.0][0],[5, 100.0][1])\nmp_request_step2_done.account=sender\nmemory_list.add([mp_request_step2_done,mp_request_step2_done.mp_request_name,['account','step','timestamp','requested_amount',\n  'requested_currency','requested_deposit','buyer_public_key_hash','timestamp_step1','timestamp_step2','timestamp_step3','timestamp_step4',\n  'buyer_public_key_hex','requested_nig','timestamp_nig','seller_public_key_hex','seller_public_key_hash','encrypted_account','buyer_reput_trans','buyer_reput_reliability',\n  'mp_request_signature','mp_request_id','previous_mp_request_name','mp_request_name','seller_safety_coef','smart_contract_ref','new_user_flag','reputation_buyer','reputation_seller']])\nmp_request_step2_done.get_requested_deposit()\n", "smart_contract_result": 63.9055, "smart_contract_previous_transaction": null}, {"amount": 0.5744, "locking_script": "OP_DUP OP_HASH160 c808db0baca648f050cd472a86fed847979d8c4b OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "account": null, "interface_public_key_hash": "1f8da1bae39c78bf4d8f9f3b8727e50001eed5ae", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "fee_node": 0, "fee_miner": 0}], "transaction_hash": "9be6febe9b0bcf4a01419093e524891bf5b90f89a9b079f1aa3cfb01465b8d41"}, {"timestamp": 1717616438.14783, "inputs": [{"transaction_hash": "0cb112556d9d4986d03052f157cc1ff52599e6959d00ecca4e0db976ee194b18", "output_index": 0, "unlocking_script": "d10027e38aa3030366a75f8ca6f59b5b9a4bab30e9a19e842c99e8884da17278cf4d7b956477773ea77d6a7b4b239edd4404f838baac01ca6c029e08483a982ea335a7cf07a5017080d9e8d6e41425125431b1fc13d9c4784cf71017a2c76d97235f6672dbadae410398d764181d4049a5092282d7773eca089c1a48eeb2ee71b17e1b4219ac43f6e5818e11dacd072f5e2f7426c14c20c924e6fdd699ca082c9fe538fff1f5a71a6e36a89b147510f6fd0b3b19344fccc0d842ed9b7b44b8ba6cc1616bbc96735e4f38d4822540a51ecc7149aece04214eb8e5ae40be33634c478788d0ac264f90579f6ff06a768d5a88a4e104d55619d9e16f97cc7fd2afb9 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001", "unlocking_public_key_hash": "31f2ac8088005412c7b031a6e342b17a65a48d01 SC 0bd2124e4af05e38497d33d09ab635a0ce5bd766b9213878e44b759eab7232dc", "network": "nig"}], "outputs": [{"amount": 0.0, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 0bd2124e4af05e38497d33d09ab635a0ce5bd766b9213878e44b759eab7232dc", "network": "nig", "account": null, "interface_public_key_hash": "1f8da1bae39c78bf4d8f9f3b8727e50001eed5ae", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "marketplace_transaction_flag": false, "smart_contract_transaction_flag": false, "fee_node": 0, "fee_miner": 0, "smart_contract_sender": "sender_public_key_hash2", "smart_contract_new": false, "smart_contract_account": "0bd2124e4af05e38497d33d09ab635a0ce5bd766b9213878e44b759eab7232dc", "smart_contract_flag": true, "smart_contract_gas": 993563.5585, "smart_contract_memory": [["BlockVote", "block_vote", ["block_PoH", "vote_list", "slash_list", "validated"], ["0bd2124e4af05e38497d33d09ab635a0ce5bd766b9213878e44b759eab7232dc", ["vps90843.serveur-vps.net", "vps90851.serveur-vps.net"], [], true]]], "smart_contract_memory_size": 3123, "smart_contract_type": "source", "smart_contract_payload": "\n#NIGthreading\nnode=\"vps90851.serveur-vps.net\"\nmemory_obj_2_load=['block_vote']\nblock_vote.validated=True\nmemory_list.add([block_vote,'block_vote',['block_PoH','vote_list','slash_list','validated']])\n123456\n", "smart_contract_result": 123456, "smart_contract_previous_transaction": "0cb112556d9d4986d03052f157cc1ff52599e6959d00ecca4e0db976ee194b18_0"}], "transaction_hash": "5ca3d315a0d6e07f62d80429d4f3490851a7dbb754712ebc31a1addec6446eb1"}, {"timestamp": 1717616442.512075, "inputs": [{"transaction_hash": "187692853dd298e9f242f487446cba2f492f1edef2315326bf200c3a1a41bac8", "output_index": 0, "unlocking_script": "604085529144657470b0436886a9f415b0ab493ee404c777ea4c37925e961a6d571c55c51f0729d3a3dc0ee541d6104c2a6f06a55bb35c886b7707b83c907e0e087634ffb20f08fe5092a3c19cf7da4cea59ffa7d8901b6a39ee75ac0af4465dbd907d3b5fcf3619dc8513a7bdd1fea737823b6a6c9eceb4b70e327e7154f0d68d327e5f0fed3809a1d732d639b2bf927173f7e570f19674a924a679204db20441d0ebf247aaf4622d2ad290b0ddbfbb20d3f2d2d0b0d1ea31239cf48150d3bc38182bd5e442dfc6ae1b98f128e801b8fa0b90d4879654122d3d2088bf4c3cb2d6c992a252ced92d571274341595334f46e40f6059790726114df08834f93a86 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001", "unlocking_public_key_hash": "31f2ac8088005412c7b031a6e342b17a65a48d01 SC 4b1f8639be3c220d355887236c5db91de222ea6d50979b547f96ec9efe175894", "network": "nig"}], "outputs": [{"amount": 0.0, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 4b1f8639be3c220d355887236c5db91de222ea6d50979b547f96ec9efe175894", "network": "nig", "account": null, "interface_public_key_hash": "1f8da1bae39c78bf4d8f9f3b8727e50001eed5ae", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "marketplace_transaction_flag": false, "smart_contract_transaction_flag": false, "fee_node": 0, "fee_miner": 0, "smart_contract_sender": "sender_public_key_hash2", "smart_contract_new": false, "smart_contract_account": "4b1f8639be3c220d355887236c5db91de222ea6d50979b547f96ec9efe175894", "smart_contract_flag": true, "smart_contract_gas": 996686.664, "smart_contract_memory": [["BlockVote", "block_vote", ["block_PoH", "vote_list", "slash_list", "validated"], ["4b1f8639be3c220d355887236c5db91de222ea6d50979b547f96ec9efe175894", ["vps90843.serveur-vps.net"], [], null]]], "smart_contract_memory_size": 3069, "smart_contract_type": "source", "smart_contract_payload": "\n#NIGthreading\nnode=\"vps90843.serveur-vps.net\"\nmemory_obj_2_load=['block_vote']\nblock_vote.vote(node)\nmemory_list.add([block_vote,'block_vote',['block_PoH','vote_list','slash_list','validated']])\n123456\n", "smart_contract_result": 123456, "smart_contract_previous_transaction": "187692853dd298e9f242f487446cba2f492f1edef2315326bf200c3a1a41bac8_0"}], "transaction_hash": "c10092b6217635f99be256f0f02c74bee7c759aa76959c912cfd264726f26a9d"}, {"timestamp": 1717616442.688488, "inputs": [{"transaction_hash": "5ca3d315a0d6e07f62d80429d4f3490851a7dbb754712ebc31a1addec6446eb1", "output_index": 0, "unlocking_script": "ccca08c6a7f9ed68935d3fcf50a17caa7ae94b5ab293d54c228fbe2d28eb5229eca5db3fcfb81e28a74ecac76863a29a88a00d5f96775347bd58ec37f28c55cf439c0e45ea136228f5184f565286bc2673736fda22e84ba1f2052fe60cdd3dfc2ef9c3549a3e92a25fae80ec913a575d8a5ac262dd447e579539b655cf717f7bbbf1d7d1fe52ee4d682ee542bffa23bce9a002a89971797529e9fc9f0e02a138356f53cfadd59d9a026b29b5376742f2c90723c3d23f197038be624da9f14880490bed5bd139f1897fdfe6731416ba117d20b108761f985be44a87434ce411a8767f812c48b3d0133cbaf109e4f4ae049cfbc760cc2872f15bfa77d3aa643d96 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001", "unlocking_public_key_hash": "31f2ac8088005412c7b031a6e342b17a65a48d01 SC 0bd2124e4af05e38497d33d09ab635a0ce5bd766b9213878e44b759eab7232dc", "network": "nig"}], "outputs": [{"amount": 0.0, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 0bd2124e4af05e38497d33d09ab635a0ce5bd766b9213878e44b759eab7232dc", "network": "nig", "account": null, "interface_public_key_hash": "1f8da1bae39c78bf4d8f9f3b8727e50001eed5ae", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "marketplace_transaction_flag": false, "smart_contract_transaction_flag": false, "fee_node": 0, "fee_miner": 0, "smart_contract_sender": "sender_public_key_hash2", "smart_contract_new": false, "smart_contract_account": "0bd2124e4af05e38497d33d09ab635a0ce5bd766b9213878e44b759eab7232dc", "smart_contract_flag": true, "smart_contract_gas": 993563.5459, "smart_contract_memory": [["BlockVote", "block_vote", ["block_PoH", "vote_list", "slash_list", "validated"], ["0bd2124e4af05e38497d33d09ab635a0ce5bd766b9213878e44b759eab7232dc", ["vps90843.serveur-vps.net", "vps90851.serveur-vps.net"], ["vps90852.serveur-vps.net"], true]]], "smart_contract_memory_size": 3123, "smart_contract_type": "source", "smart_contract_payload": "\n#NIGthreading\nnode=\"vps90852.serveur-vps.net\"\nmemory_obj_2_load=['block_vote']\nblock_vote.slash(node)\nmemory_list.add([block_vote,'block_vote',['block_PoH','vote_list','slash_list','validated']])\n123456\n", "smart_contract_result": 123456, "smart_contract_previous_transaction": "5ca3d315a0d6e07f62d80429d4f3490851a7dbb754712ebc31a1addec6446eb1_0"}], "transaction_hash": "33d8c04b47a053202a0002d43aa160db155b07c7481c4827ca8aa6f5085024d4"}, {"timestamp": 1717616442.791393, "inputs": [{"transaction_hash": "c10092b6217635f99be256f0f02c74bee7c759aa76959c912cfd264726f26a9d", "output_index": 0, "unlocking_script": "3047eb776acfee4e7f90c6f7de1fd18f34e2538c5bf67d3a4f8e601ee610c42810e049a234f21cf5590897e7ef43b6c9d917ff00dc769f90a24af0ed4bed73fbf65cdd4857ebe9407091289dcedddacb0e72e8b7450beb6341c546c3c553340a80c98a4530e69f4f5f8fd5b0dc821a61e2bc048ad2be5892b149d567dab9de835bbcf6cd2cece3d4c0e87e13adc3d027256c73079707de043e414e4f6ae0cb30e9540ffcdca056ec8135ce2d83a7321fb1d023b1de081ef213882285cc2cad2018be1ccf9396bfc2145d5d25ce9bd63c385c14ea6e0e43c1aa4e37a5568dd050c1b3bbd3b179afe01df58b85e362c9d79357d011f629e85b31efec8112b52c6f 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001", "unlocking_public_key_hash": "31f2ac8088005412c7b031a6e342b17a65a48d01 SC 4b1f8639be3c220d355887236c5db91de222ea6d50979b547f96ec9efe175894", "network": "nig"}], "outputs": [{"amount": 0.0, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 4b1f8639be3c220d355887236c5db91de222ea6d50979b547f96ec9efe175894", "network": "nig", "account": null, "interface_public_key_hash": "1f8da1bae39c78bf4d8f9f3b8727e50001eed5ae", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "marketplace_transaction_flag": false, "smart_contract_transaction_flag": false, "fee_node": 0, "fee_miner": 0, "smart_contract_sender": "sender_public_key_hash2", "smart_contract_new": false, "smart_contract_account": "4b1f8639be3c220d355887236c5db91de222ea6d50979b547f96ec9efe175894", "smart_contract_flag": true, "smart_contract_gas": 996686.6744, "smart_contract_memory": [["BlockVote", "block_vote", ["block_PoH", "vote_list", "slash_list", "validated"], ["4b1f8639be3c220d355887236c5db91de222ea6d50979b547f96ec9efe175894", ["vps90843.serveur-vps.net", "vps90852.serveur-vps.net"], [], null]]], "smart_contract_memory_size": 3069, "smart_contract_type": "source", "smart_contract_payload": "\n#NIGthreading\nnode=\"vps90852.serveur-vps.net\"\nmemory_obj_2_load=['block_vote']\nblock_vote.vote(node)\nmemory_list.add([block_vote,'block_vote',['block_PoH','vote_list','slash_list','validated']])\n123456\n", "smart_contract_result": 123456, "smart_contract_previous_transaction": "c10092b6217635f99be256f0f02c74bee7c759aa76959c912cfd264726f26a9d_0"}], "transaction_hash": "71ab3a1b5fc8df257c48c5abf68bfcc6beff63fabc5e2bbf1281580fa0ffee39"}, {"inputs": [], "outputs": [{"amount": 1.8, "locking_script": "OP_DUP OP_HASH160 1f8da1bae39c78bf4d8f9f3b8727e50001eed5ae OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "account": null, "interface_public_key_hash": null, "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "fee_node": 0, "fee_miner": 0}], "transaction_hash": "f7318260cb49fba3af6ffbe6ae0228950896f2be1e53fc447b984b6669aa4e3d", "timestamp": 1717616849.683219}, {"inputs": [], "outputs": [{"amount": 1.2, "locking_script": "OP_DUP OP_HASH160 183e3d96b5b818841bd95ce36635afcc423b5639 OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "account": null, "interface_public_key_hash": null, "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "fee_node": 0, "fee_miner": 0}], "transaction_hash": "bd75937b3d1e089585ab540b24682d30197d83650d4e3519240590d779857a4c", "timestamp": 1717616849.683332}, {"inputs": [], "outputs": [{"amount": 3.0, "locking_script": "OP_DUP OP_HASH160 9c7ce20e85b7aaf7986ec311ffce647e07081233 OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "account": null, "interface_public_key_hash": null, "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "fee_node": 0, "fee_miner": 0}], "transaction_hash": "7e1c94eff4a6025a4050a03242308abf9379ec4821a05d9b2a9bafe5b9ac4d29", "timestamp": 1717616849.683428}, {"inputs": [], "outputs": [{"amount": 0.0, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC b4db0667615d85f02dc85d74d1a18b64786fab74dcf97251853a895a0d26315a", "network": "nig", "account": null, "interface_public_key_hash": null, "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "fee_interface": 0, "marketplace_transaction_flag": false, "smart_contract_transaction_flag": true, "fee_node": 0, "fee_miner": 0, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_new": true, "smart_contract_account": "b4db0667615d85f02dc85d74d1a18b64786fab74dcf97251853a895a0d26315a", "smart_contract_flag": true, "smart_contract_gas": 999754.8777, "smart_contract_memory": [["BlockVote", "block_vote", ["block_PoH", "vote_list", "slash_list", "validated"], ["b4db0667615d85f02dc85d74d1a18b64786fab74dcf97251853a895a0d26315a", [], [], null]]], "smart_contract_memory_size": 244, "smart_contract_type": "source", "smart_contract_payload": "block_PoH=\"b4db0667615d85f02dc85d74d1a18b64786fab74dcf97251853a895a0d26315a\"\n\n###VERSION:1\n###END\nclass BlockVote:\n    def __init__(self,block_PoH):\n        self.block_PoH=block_PoH\n        self.vote_list=[]\n        self.slash_list=[]\n        self.validated=None\n\n    def check_vote(self,node):\n        if node in self.vote_list or node in self.slash_list or self.validated is True or self.validated is False:return False\n        else:return True\n\n    def vote(self,node):\n        if node not in self.vote_list:self.vote_list.append(node)\n        if node in self.slash_list:self.slash_list.remove(node)\n\n    def slash(self,node):\n        if node not in self.slash_list:self.slash_list.append(node)\n        if node in self.vote_list:self.vote_list.remove(node)\n\n    def vote_ratio(self):\n        total=len(self.vote_list)+len(self.slash_list)\n        self.ratio=0\n        if total>0:\n            ratio_vote=float(len(self.vote_list)/total)\n            ratio_slash=float(len(self.slash_list)/total)\n            if ratio_vote>ratio_slash:self.ratio=ratio_vote\n            if ratio_vote<ratio_slash:self.ratio=-ratio_slash\n        return self.ratio\n        \n    def validate(self,node):\n        self.vote_ratio()\n        total_vote=len(self.vote_list)+len(self.slash_list)\n        if self.ratio>=0.66 and total_vote>=2:self.validated=True\n        if self.ratio<=0.66 and total_vote>=2:self.validated=False\n        return self.validated\n\n    def is_validated(self,node):\n        return self.validated\n\nblock_vote=BlockVote(block_PoH)\nmemory_list.add([block_vote,'block_vote',['block_PoH','vote_list','slash_list','validated']])\n123456\n", "smart_contract_result": 123456, "smart_contract_previous_transaction": null}], "transaction_hash": "fd71e678dcbfc7e9764d7d5ffa08d5a7a029693b166fc171fb7f3ff73fe3eb0c", "timestamp": 1717616849.85109}]}