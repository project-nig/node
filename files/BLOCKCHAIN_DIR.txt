[{"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "abcd1234", "unlocking_public_key_hash": "abcd1234_0", "unlocking_script": ""}], "outputs": [{"account": null, "amount": 1000000.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 1af8595f1c5dd87607e162d69f4109fae2ef022c OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639"}], "timestamp": 1717152088.109357, "transaction_hash": "d58b380ee52d491ccb1a60bfee6c1b1e36f61c8f9bbe6e340a1e7489ddba042a"}, {"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "abcd1234", "unlocking_public_key_hash": "abcd1234_0", "unlocking_script": "a795e6058117b49a18b44de2d7cf25a5a2204b179aa47c0001897dd9e897076b9907f448667015cc6465d2beed9664aac9c62952cb8cd32794620dd263319ca0df0206cbf1cd9df06ff3e810193d351868caa6c676d594e512b051a29fd1a84ce0a47787eafeed55e94575da3c0c586400e5e18880c89cff902d29184758cb7fbe6ae36c5bb0f06b84d4d54718c6081b2be2a0cb3588c47e789c628a902cda3722c0503f5c19420d5b696bde7de52e964085421493a79c2690e8aba5ac3cbc490abd8834bb36b759f85fdb5eae372fb19c92f186471aef08a3bc69c438bab0b5ead6a68c5980b1ca0bd41af180f8f51e5ecea371f6607573c706d2da2206e7a1 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "smart_contract_flag": true, "smart_contract_gas": 999772.0, "smart_contract_memory": [["NodeNetwork", "node_network", ["node_dict"], [{}]]], "smart_contract_memory_size": 228, "smart_contract_new": true, "smart_contract_payload": "\n###VERSION:1\n###END\nclass NodeNetwork:\n    def __init__(self):\n        self.node_dict={}\n\n    def add_node(self,node_input_dict):\n        node_dict_temp=self.node_dict.copy()\n        node_public_key_hash=node_input_dict['node_public_key_hash']\n        node_public_key_hex=node_input_dict['node_public_key_hex']\n        node_url=node_input_dict['node_url']\n        try:\n            node_dict_temp[node_public_key_hash]\n        except:\n            new_node_dict={}\n            new_node_dict['creation']=datetime.timestamp(datetime.utcnow())\n            new_node_dict['public_key_hex']=node_public_key_hex\n            new_node_dict['node_url']=node_url\n            new_node_dict['active']=True\n            node_dict_temp[node_public_key_hash]=new_node_dict\n            self.node_dict=node_dict_temp\n\n    def get_public_key_hash(self,node_url):\n        public_key_hash=None\n        for item in [i for i in self.node_dict.items() if i[1]['node_url']==node_url]:\n            public_key_hash=item[0]\n        return public_key_hash\n\n    def get_public_key_hex(self,node_public_key_hash):\n        public_key_hex=None\n        try:\n            public_key_hex=self.node_dict[node_public_key_hash]['public_key_hex']\n        except:pass\n        return public_key_hex\n\n    def active_node(self,node_public_key_hash):\n        try:\n            self.node_dict[node_public_key_hash]['active']=True\n        except:pass\n\n    def deactive_node(self,node_public_key_hash):\n        try:\n            self.node_dict[node_public_key_hash]['active']=False\n        except:pass\n\n    def remove_node(self,node_public_key_hash):\n        try:del self.node_dict[node_public_key_hash]\n        except:pass\n        \nnode_network=NodeNetwork()\nmemory_list.add([node_network,'node_network',['node_dict']])\n123456\n", "smart_contract_previous_transaction": null, "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1717152088.11149, "transaction_hash": "ebd718f2315609b2fce6a743ffe9bcf08603835e76884341c5326cfa2aadfca1"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "d58b380ee52d491ccb1a60bfee6c1b1e36f61c8f9bbe6e340a1e7489ddba042a", "unlocking_public_key_hash": "1af8595f1c5dd87607e162d69f4109fae2ef022c", "unlocking_script": "2e9ea658ff61bc749101975c5cef328d163206e020a1f3db7a8dfb5e5325184adc4e460f17f8493ba8b0e3cd476cc4414a69fd46f81ceeec04946513d1dad9d3da49d093684efefabd3d08d80672199d89470aa81bb71796b4ba5400d3c6da3a2757644986fc948d2f055316392294d8a697c80a5985413f961d4ac86f19db5e52190680d8545d314588867b7b7f7e7113880d959edf1f5d49cdfc11f817c7c05ea904d028d4b7349f5b67d655a093786deccceb90aed7fce8b962232151189d474ce42d9917c2f0b1e0cab8336c3c0bacc6d5e0be5fee381bda0ec3f003aa1fad8b29584d114be6bcfa0157f313d0c44968296b7043f186234beb922bf68d90 30820122300d06092a864886f70d01010105000382010f003082010a0282010100d5cfa273764e9e8fcbcb49f2f69a6639f5161a12d9813d9a53be409ecb77a30d68c3175fe314276a6897a057f351ea5a6cff1811e8c17a8af04823eae1d24264cfa9f7f958ed86f03caea088e593ee567c25bd99d3dabd194b612a823da29a8009c869ef6c334588cc733b6fb7491eca11e7d627130136c6aca0dc876d76944805efcf6901c7e0d9fb5c2a1ef9aab2bed0a3b5231df0dc229b524e0bbf68a9cb2c82b97d01d3e86b097968bef0ebebea6089d4023412299b9c16024bd8dda7cfbb02576c04db89fac1d16ca248de6abebedc78ef2a64a6753c55a3927ce6215850dc5c55145cb584e9e5a6e49309bf78e4c343005ac967667286bcd320c4f61b0203010001"}], "outputs": [{"account": null, "amount": 500000.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 d65478e5aa6b64418ec7375126c20973e65aa61f OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639"}, {"account": null, "amount": 500000.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 1af8595f1c5dd87607e162d69f4109fae2ef022c OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639"}], "timestamp": 1717152088.136737, "transaction_hash": "e3dbbc87d7721c5224f862eacc6b51b41d0e87d2a34f37c4ee44d127bd8a239d"}, {"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "ebd718f2315609b2fce6a743ffe9bcf08603835e76884341c5326cfa2aadfca1", "unlocking_public_key_hash": "31f2ac8088005412c7b031a6e342b17a65a48d01 SC 5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "unlocking_script": "0aefdab9dd0a55b78448a86e80374f89fc64810412e6ae53408719b53dd518354093a33bb995a59d69ce6314b07c359bce82f1be299a93a21a6c9ba6c9fdb9ee58123a7066164f17f83f02b9e9678663326cbec0f55356033eb2e18693bad1ddd5d7b15af8d8ed9bfb5a8165d0b8f6534fdb2a08c7a571f81cadc8d6382e0ea52da9d80fd9ba272e00135e55b2e53211f230482d825911b57cc40e1f0d63af3eff5bee0edb8a02a9948412ef9fa00926454d261ad3f1331247767093304886caf101e67f73d45c5e7006f634b57b96c87d9e0773bf1ccfcebf4ea494a203eaaa4489ab8702f8e3e15aad27b29016bfe1f55fa9280160d922396a6c208f6a781f 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "smart_contract_flag": true, "smart_contract_gas": 996670.8486, "smart_contract_memory": [["NodeNetwork", "node_network", ["node_dict"], [{"26de30d33746bc6053e4dd9971270366da6db50b": {"active": true, "creation": 1717152088.146581, "node_url": "127.0.0.2:5000", "public_key_hex": "30820122300d06092a864886f70d01010105000382010f003082010a0282010100dd7cff0df3d62747f6a6c43efc9e36741760c1acddc464a60be6727dfcc97a0ecf3b468e8f3c3a8eaba2e5df1a454acf2e478cbcaf88f0f36fc4c61afedb54bc597200ec781fabb490f70ce3086e34f9a3b500abc72bb9193dcac434207b54c4008cf9641b5e34ee24128028c599b31f302aef00cf20fb9c4a6f29831c0ce649799ecd1e97ecf71cd2a4ee39f96936a4f5f8f7f96cd4bb49e46d4ea7f068429c9b33a8c47449708dc78b926a67603f9bafacd4d8c2ba3d745b36c9f37a648d4240d4600073da56fcccf86a4e4437a3bf091b7b25e8bfd6f66e41e3d9110f9d8dc26cff2b77cb8e5dae4de8db77a0d9173de3561b4c409353dcd6f592c2b33fcb0203010001"}}]]], "smart_contract_memory_size": 3101, "smart_contract_new": false, "smart_contract_payload": "\nmemory_obj_2_load=['node_network']\nnode_public_key_hash=\"26de30d33746bc6053e4dd9971270366da6db50b\"\nnode_public_key_hex=\"30820122300d06092a864886f70d01010105000382010f003082010a0282010100dd7cff0df3d62747f6a6c43efc9e36741760c1acddc464a60be6727dfcc97a0ecf3b468e8f3c3a8eaba2e5df1a454acf2e478cbcaf88f0f36fc4c61afedb54bc597200ec781fabb490f70ce3086e34f9a3b500abc72bb9193dcac434207b54c4008cf9641b5e34ee24128028c599b31f302aef00cf20fb9c4a6f29831c0ce649799ecd1e97ecf71cd2a4ee39f96936a4f5f8f7f96cd4bb49e46d4ea7f068429c9b33a8c47449708dc78b926a67603f9bafacd4d8c2ba3d745b36c9f37a648d4240d4600073da56fcccf86a4e4437a3bf091b7b25e8bfd6f66e41e3d9110f9d8dc26cff2b77cb8e5dae4de8db77a0d9173de3561b4c409353dcd6f592c2b33fcb0203010001\"\nnode_url=\"127.0.0.2:5000\"\n\nnode_input_dict={}\nnode_input_dict['node_public_key_hash']=node_public_key_hash\nnode_input_dict['node_public_key_hex']=node_public_key_hex\nnode_input_dict['node_url']=node_url\nnode_network.add_node(node_input_dict)\nmemory_list.add([node_network,'node_network',['node_dict']])\n123456\n", "smart_contract_previous_transaction": "ebd718f2315609b2fce6a743ffe9bcf08603835e76884341c5326cfa2aadfca1_0", "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1717152088.148174, "transaction_hash": "bc35dc4cbec6de35b591f9674964eaa35d1386ae5107290fb56107fd1511ae09"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 1, "transaction_hash": "e3dbbc87d7721c5224f862eacc6b51b41d0e87d2a34f37c4ee44d127bd8a239d", "unlocking_public_key_hash": "d65478e5aa6b64418ec7375126c20973e65aa61f", "unlocking_script": "2b66b1469b710f0547e9a1c705b6859478c73c3ce70250fb47196601fde0690d580be5384ceffabfd128942c0da802d22431f060fd18c526660d3b3e5379a7df0907394abae89d4e83e198677d649023a64a1d10ed84ec442e88aa96fe16aad774008ecc4509c0f5db857388f4fe46bbfb0a48d093d61bb6a591f4f511b5a874731fb877fbad92e30d188181bb7ea247fb865441495e6e54d17f07dfe754dbe96ed05f11e30e5541eb3be450cd4200702230b882a9dcee5951354d065832f5aa0eacadf1061b9c28c509a817bd8a2c5458c5644f0bb16abbcb26d3060c98d3f184e4d9b4bb6a51d4b3fe16dbd347b7e7491eb37b29b42c2be7b6c233a2955e7a 30820122300d06092a864886f70d01010105000382010f003082010a0282010100b0db1c502904cfb7c17d0682ea6c9b9fe37a74f2f1bd9c701579ba67ee2384ced71aa9241098a1d5c09683fee4a02912c8172cbd5ed5edeb22a17560e3bb373ca2e2e1f45f81c849292d084ae6fca85911207c31ba177d8ae5752be0654c030e889367bf59f793cfb8079b78dfd36f85c96f15ef88f67fcf32dca86070ae2c48e4abbc8f51ff810d45c2e50017eb3a1353f4568aa577aea425e42afb6e9eaaa2c1d8c34bd48fed8a6abd6383d2ec2ba3e40b82f770b9aa281016de245e1f70a544858db5cb7a0134a5e56141f014421109c3f799283cbfdf90e4e1428aced0c35b8291e4595bef25e9047e54ca8b693b6b7a0332ed10c9f6bedd04194aa38f250203010001"}], "outputs": [{"account": null, "amount": 100000.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 84d7eee902bf978d379aa988da0068d71e0037a7 OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639"}], "timestamp": 1717152088.173365, "transaction_hash": "4a569ff9cd03d2519ac67d9ccb443d860c9fe5d820d53f15c3a8ef376fe97d08"}, {"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "bc35dc4cbec6de35b591f9674964eaa35d1386ae5107290fb56107fd1511ae09", "unlocking_public_key_hash": "31f2ac8088005412c7b031a6e342b17a65a48d01 SC 5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "unlocking_script": "268b218f8cf6e9ee85f0f081eeaeb3f54137f6fad6e915f98e60a44e87f70c97f5d8d0f58b85c706a874cb205c437d3b9af53a069cca39693f034e1d093a77ef912bdebaeb84b25c5cb6df2f41b2e648198e82dd31596431f25edbfd15f1028fb0c7641856cd38e53ba66525ae4f5b06565b96b9a43d3eb9638eb5ed9783c3f5bce766ba79821740d8505e49bfc7eff7cb833ececd35db0b20ee9b74cd1d548bcc8ae784f971b1ecfa4089bd562986b01f6bd3c5bb1917603d0767e94f5d93b68e4dbf1cf131b0603d4e75e3a3cc07f41f231ee476b6ddae157c39942f4aa305210c49e9a8a84985266cd7603b5a94c4c06634f9a26f85be2ef102fed31248e0 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "smart_contract_flag": true, "smart_contract_gas": 992838.7477000001, "smart_contract_memory": [["NodeNetwork", "node_network", ["node_dict"], [{"26de30d33746bc6053e4dd9971270366da6db50b": {"active": true, "creation": 1717152088.146581, "node_url": "127.0.0.2:5000", "public_key_hex": "30820122300d06092a864886f70d01010105000382010f003082010a0282010100dd7cff0df3d62747f6a6c43efc9e36741760c1acddc464a60be6727dfcc97a0ecf3b468e8f3c3a8eaba2e5df1a454acf2e478cbcaf88f0f36fc4c61afedb54bc597200ec781fabb490f70ce3086e34f9a3b500abc72bb9193dcac434207b54c4008cf9641b5e34ee24128028c599b31f302aef00cf20fb9c4a6f29831c0ce649799ecd1e97ecf71cd2a4ee39f96936a4f5f8f7f96cd4bb49e46d4ea7f068429c9b33a8c47449708dc78b926a67603f9bafacd4d8c2ba3d745b36c9f37a648d4240d4600073da56fcccf86a4e4437a3bf091b7b25e8bfd6f66e41e3d9110f9d8dc26cff2b77cb8e5dae4de8db77a0d9173de3561b4c409353dcd6f592c2b33fcb0203010001"}, "f6bf165beeb8e1a18210ba69d0705c5ab9a72dd8": {"active": true, "creation": 1717152088.184098, "node_url": "127.0.0.3:5000", "public_key_hex": "30820122300d06092a864886f70d01010105000382010f003082010a0282010100ca950ba771a764a4e7d97d51b16c81648535237acdde7e00cb7f90a5fe343d58b6d53b8823af2dde95093d7418da12262e3d02bf32c93adc5627359b9163f2dab81f205866a55dffb8f7bf6ba1a10b3dbdd6f604ca80deef52558f9efa6035eee7bb042728e9a428ef587056874000dd4e88e0c962f581682284feec8c8c40913b60bb2160e35eba480ab531e58994ce4fec18263490a2e2ceeb567c49f4aed1b03f9af41426b33a1865163284303adfdfe4a5be26a71621acc41f1de4893ccd89f2224c09281fbf65c776468fc2f85c57774d11175f36eae4d16dc71b04cde2efc0e467a2d2531b5f01beba3187e1c5b14caa0bf206d503788c6ac57b6126590203010001"}}]]], "smart_contract_memory_size": 3832, "smart_contract_new": false, "smart_contract_payload": "\nmemory_obj_2_load=['node_network']\nnode_public_key_hash=\"f6bf165beeb8e1a18210ba69d0705c5ab9a72dd8\"\nnode_public_key_hex=\"30820122300d06092a864886f70d01010105000382010f003082010a0282010100ca950ba771a764a4e7d97d51b16c81648535237acdde7e00cb7f90a5fe343d58b6d53b8823af2dde95093d7418da12262e3d02bf32c93adc5627359b9163f2dab81f205866a55dffb8f7bf6ba1a10b3dbdd6f604ca80deef52558f9efa6035eee7bb042728e9a428ef587056874000dd4e88e0c962f581682284feec8c8c40913b60bb2160e35eba480ab531e58994ce4fec18263490a2e2ceeb567c49f4aed1b03f9af41426b33a1865163284303adfdfe4a5be26a71621acc41f1de4893ccd89f2224c09281fbf65c776468fc2f85c57774d11175f36eae4d16dc71b04cde2efc0e467a2d2531b5f01beba3187e1c5b14caa0bf206d503788c6ac57b6126590203010001\"\nnode_url=\"127.0.0.3:5000\"\n\nnode_input_dict={}\nnode_input_dict['node_public_key_hash']=node_public_key_hash\nnode_input_dict['node_public_key_hex']=node_public_key_hex\nnode_input_dict['node_url']=node_url\nnode_network.add_node(node_input_dict)\nmemory_list.add([node_network,'node_network',['node_dict']])\n123456\n", "smart_contract_previous_transaction": "bc35dc4cbec6de35b591f9674964eaa35d1386ae5107290fb56107fd1511ae09_0", "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1717152088.185094, "transaction_hash": "73bdf8e54ce49598c69e288d5978011c4c8ba5e1852a983ccf3561b805414acc"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "e3dbbc87d7721c5224f862eacc6b51b41d0e87d2a34f37c4ee44d127bd8a239d", "unlocking_public_key_hash": "d65478e5aa6b64418ec7375126c20973e65aa61f", "unlocking_script": "4f500daada5302a8091fee91d307b6a2670f6439ca0b0d73148a8880dccd0617632948263a935e2653376a7016cedc22bf78664e4a497ddd9a20a081bfa97e812c96e383c53eb21cbe26ee448de2edb488eeeed8ba14fe1bb26ae1df8dc3899ba8090bcd48799aa87b2de8a6724be30dc8f7db5c1611af59c185fec8a0801e6de99219fc023e96d1a693228166d110442a1a67a00ae79f1e7d4433bea7d09f99cf9ee0cc394844cee280157fefb452561d1a9bd242ad5d2c33c6d075feca2542171856e91802e2e94e6f389fcd5c2fd688f15dd310ba1067cf47de0d271f0faf612e179dbcf75ca9288e51ae2959976a2f8420e7698ea49c1b01fd611a0ecd6a 30820122300d06092a864886f70d01010105000382010f003082010a0282010100b0db1c502904cfb7c17d0682ea6c9b9fe37a74f2f1bd9c701579ba67ee2384ced71aa9241098a1d5c09683fee4a02912c8172cbd5ed5edeb22a17560e3bb373ca2e2e1f45f81c849292d084ae6fca85911207c31ba177d8ae5752be0654c030e889367bf59f793cfb8079b78dfd36f85c96f15ef88f67fcf32dca86070ae2c48e4abbc8f51ff810d45c2e50017eb3a1353f4568aa577aea425e42afb6e9eaaa2c1d8c34bd48fed8a6abd6383d2ec2ba3e40b82f770b9aa281016de245e1f70a544858db5cb7a0134a5e56141f014421109c3f799283cbfdf90e4e1428aced0c35b8291e4595bef25e9047e54ca8b693b6b7a0332ed10c9f6bedd04194aa38f250203010001"}], "outputs": [{"account": null, "amount": 50000.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 84d7eee902bf978d379aa988da0068d71e0037a7 OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639"}, {"account": null, "amount": 450000.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 d65478e5aa6b64418ec7375126c20973e65aa61f OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639"}], "timestamp": 1717152088.2087, "transaction_hash": "4ff6152110c040096a47c978b42603f03e7fe9142f648c544b20c277882a0db0"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "e3dbbc87d7721c5224f862eacc6b51b41d0e87d2a34f37c4ee44d127bd8a239d", "unlocking_public_key_hash": "", "unlocking_script": "42dc6d19ccee17d0af9fca695b4e100a5cf574b01ffb62cdfdaf5df324a0bb3a113c3172dd7ab65d4a70a3fc4830bfe8f0129aaa06324f055e9f201d3f50ebe2299bc2f132f555d1c2aa5372e05eec7ac27880e416c5d950a0571f751be90962031d0f16d7fc73e46768a88af61a24eb3cc02ba49dd38c3b355b089eb68682a376b49f94e605d5d3c12f7f3fd00adfdce0caed4000eb1490e2ceb3ab59affd650010b5e588f18b9588de5aa2f37594ef45ec5ca6d6dfbd8fd5324433b50265775e07bee46765ecb2593f944e53b4391e126f52d0ab061e07d65e5f72f5468ea63bf7fb527b84739f6d4e6fd67c6200cd70bd5a01acdb007a950db791d49553be 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_flag": true, "smart_contract_gas": 999771.9005, "smart_contract_memory": [["Marketplace", "marketplace", ["first_mp_request_name", "current_mp_request_name", "current_mp_request_count"], [null, null, 1]]], "smart_contract_memory_size": 228, "smart_contract_new": true, "smart_contract_payload": "\n###VERSION:1\n###END\nclass Marketplace:\n    def __init__(self):\n        self.first_mp_request_name=None\n        self.current_mp_request_name=None\n        self.current_mp_request_count=1\n\n    def get_mp_request_name(self):\n        return \"mp_request_\"+str(self.current_mp_request_count)\n\n    def add_mp_request_name(self,mp_request_name):\n        if self.first_mp_request_name is None or self.first_mp_request_name==\"null\" or self.first_mp_request_name==\"None\":self.first_mp_request_name=mp_request_name\n        self.current_mp_request_name=mp_request_name\n        self.current_mp_request_count+=1\n\n    def get_current_mp_request_name(self):\n        return self.current_mp_request_name\n\n    def get_marketplace_step_list(self,step,user_public_key_hash):\n        marketplace_step_list=[]\n        cursor=self.current_mp_request_name\n        while cursor is not None and 'null' not in cursor:\n            cursor_obj=get_obj_by_name(cursor)\n            if step==1 and cursor_obj.step==step and cursor_obj.buyer_public_key_hash!=user_public_key_hash:marketplace_step_list.append(cursor_obj.get_mp_info(1,user_public_key_hash))\n            elif step==2 and cursor_obj.step==step and cursor_obj.buyer_public_key_hash==user_public_key_hash:marketplace_step_list.append(cursor_obj.get_mp_info(2,user_public_key_hash))\n            elif step==3 and cursor_obj.step==step and cursor_obj.seller_public_key_hash==user_public_key_hash:marketplace_step_list.append(cursor_obj.get_mp_info(3,user_public_key_hash))\n            cursor=cursor_obj.previous_mp_request_name\n        return marketplace_step_list\n\nmarketplace=Marketplace()\nmemory_list.add([marketplace,'marketplace',['first_mp_request_name','current_mp_request_name','current_mp_request_count']])\n123456\n", "smart_contract_previous_transaction": null, "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1717152088.225793, "transaction_hash": "1d499fc01f1281da0217540029441fb267b0709e118b2eec036f5c6ecb841b1f"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "abcd1234", "unlocking_public_key_hash": "abcd1234_0", "unlocking_script": "6450619c303efb2e386c44a57322c52be33ee12b26d631d5a24517b15006888b577ef9dd63a9e698ad50cf1c37a02e05704acf35a3597ef36015d75b67e0ae49a0551ef1a7760693146f654fcc63c01e41f8b8b4fbbfb30a433718dd10b533c6835baa4d30bd8a431f7becb9e2e1c7669f5c8a0e051f6f0c9b7d538a19bef8c425d03bfe45c05563f027f11cb2dac81114460672864ac7f08174ed101589e871ac6162af1062788e1b49209b08d23f8540462df3dc5d0176c2982c1ffb2360336dbc89b6cdbbdea77f1c79545de0437c8b4baeff4dd97b48a881da330984fd0478c362de4d6ac5ee14c9d7ff38b926143a86f40523ea14a561f89204ae0d954b 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 0ee93ba03f12c3a9e04b7982b5e4b657654aa74a", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "0ee93ba03f12c3a9e04b7982b5e4b657654aa74a", "smart_contract_flag": true, "smart_contract_gas": 999771.8995, "smart_contract_memory": [["Application", "application", ["version", "url"], ["22", "https://drive.google.com/file/d/14e-xmqB-B59XACSRFNMsJa4yyJdyUG62/view?usp=drive_link"]]], "smart_contract_memory_size": 228, "smart_contract_new": true, "smart_contract_payload": "\n###VERSION:1\n###END\nclass Application:\n    def __init__(self):\n        self.version=\"22\"\n        self.url=\"https://drive.google.com/file/d/14e-xmqB-B59XACSRFNMsJa4yyJdyUG62/view?usp=drive_link\"\n\n    def get_version_data(self):\n        return {\"version\":self.version,\"url\":self.url}\n\n        \napplication=Application()\nmemory_list.add([application,'application',['version','url']])\n123456\n", "smart_contract_previous_transaction": null, "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1717152088.243601, "transaction_hash": "abb267be27db3717ad2da090094436ca13ad1fdf39bc091fec4d4a2781be59db"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "abcd1234", "unlocking_public_key_hash": "abcd1234_0", "unlocking_script": "040873960f23aeeeea51069ee02b8792f8a2b3b76467b34138109aa55b3e9bb0d5db97583637aa230b4630b4c0ee5afd071d7fad21e4d067d8e937f83eedb978383509b6d88d125aade061e42ff3a99f52ac01b8aa2e43dbb4534cf6d470bd0772f907b149d1686a0fa4be8422b11cf51b0f60a0ee25eb02de291e169900fe89bcb0bebf4cb78f97d724f76a5d624e34fb00e68a08a29909cf3db0adede69c863cd35d0e58478cb55ef3817afb3f8d417cc1324ae2d9a56270aadb454877231b8abe8090f7da428d78b845c69dc25538697a234d60992cc2dc350831e0d2b3a4bc3b61312ba4e07fc2cb4db2385b38bd37bc2f848ee03d58358b4567a31b29c2 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 41e69d07d38a4d7cca36df456ef099e8efb0512d", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "41e69d07d38a4d7cca36df456ef099e8efb0512d", "smart_contract_flag": true, "smart_contract_gas": 999771.9, "smart_contract_memory": [["MarketplaceRequestCode", "marketplace_request_code", ["code"], ["\n###VERSION:1\n\nclass MarketplaceRequest:\n    def __init__(self):\n        self.account=None\n        self.step=0\n        self.new_user_flag=False\n        self.timestamp=datetime.timestamp(datetime.utcnow())\n        self.timestamp_step1=None\n        self.timestamp_step2=None\n        self.timestamp_step3=None\n        self.timestamp_step4=None\n        self.requested_amount=0\n        self.requested_currency='EUR'\n        self.requested_deposit=0\n        self.requested_nig=0\n        self.requested_nig_step2=None\n        self.requested_nig_step2_flag=False\n        self.timestamp_nig=None\n        self.buyer_public_key_hex=None\n        self.buyer_public_key_hash=None\n        self.buyer_public_key_hash=None\n        self.buyer_reput_trans=0\n        self.buyer_reput_reliability=0\n        self.seller_public_key_hex=\"\"\n        self.seller_public_key_hash=\"\"\n        self.encrypted_account=\"\"\n        self.mp_request_signature=None\n        self.mp_request_id=random.randint(10000000, 99999999)\n        self.previous_mp_request_name=None\n        self.mp_request_name=None\n        self.seller_safety_coef=GET_SELLER_SAFETY_COEF()\n        self.smart_contract_ref=None\n        self.reputation_buyer=0\n        self.reputation_seller=0\n\n    def get_mp_details(self,step):\n        mp_details = [self.timestamp,self.buyer_public_key_hash,self.buyer_public_key_hex,self.requested_amount,self.mp_request_id]\n        if self.requested_nig_step2_flag is True:requested_nig=self.requested_nig_step2\n        else:requested_nig=self.requested_nig\n        if self.step>=1:\n            self.seller_safety_coef=GET_SELLER_SAFETY_COEF()\n            mp_details.extend([requested_nig,self.seller_safety_coef])\n        if self.step>=2:mp_details.extend([self.seller_public_key_hex,self.seller_public_key_hash,self.requested_deposit])\n        if self.step==99:mp_details.append(\"cancellation\")\n        if self.step==66:mp_details.append(\"payment default\")\n        return mp_details\n\n    def get_requested_deposit(self):\n        return self.requested_deposit\n\n    def get_new_user_flag(self):\n        return self.new_user_flag\n\n    def get_reputation(self):\n        if self.reputation_buyer!=0 or self.reputation_seller!=0:return {self.buyer_public_key_hash:self.reputation_buyer,self.seller_public_key_hash:self.reputation_seller}\n        else:return None\n\n    def get_mp_info(self,step,user_public_key_hash):\n        try:step=int(step)\n        except:step=99\n        mp_details=None\n        flag=False\n        readonly_flag=False\n        if self.step!=4 and self.step!=45 and self.step!=66 and self.step!=98 and self.step!=99:\n            if step==1:\n                flag=True\n                if self.buyer_public_key_hash==user_public_key_hash:readonly_flag=True\n            if step==2:\n                if self.buyer_public_key_hash==user_public_key_hash:flag=True\n                if self.step==1:readonly_flag=True\n                if self.step==3:readonly_flag=True\n            if step==3:\n                if self.seller_public_key_hash==user_public_key_hash:flag=True\n                if self.step==2:readonly_flag=True\n            if flag is True:\n                mp_details = {\"timestamp_nig\": self.timestamp,\"requester_public_key_hash\": self.buyer_public_key_hash,\"requester_public_key_hex\": self.buyer_public_key_hex,\"seller_public_key_hash\": self.seller_public_key_hash,\"requested_amount\": self.requested_amount,\"requested_currency\":self.requested_currency,\"requested_nig\": self.requested_nig,\"payment_ref\": self.mp_request_name}\n                mp_details['seller_public_key_hex']=self.seller_public_key_hex\n                mp_details['encrypted_account']=self.encrypted_account\n                mp_details['smart_contract_ref']=self.smart_contract_ref\n                mp_details['readonly_flag']=readonly_flag\n                mp_details['buyer_reput_trans']=self.buyer_reput_trans\n                mp_details['buyer_reput_reliability']=self.buyer_reput_reliability\n                mp_details['step']=self.step\n        return mp_details\n\n    def get_mp_info_archive(self,step):\n        mp_details=None\n        if step==self.step:\n            mp_details = {\"timestamp_nig\": self.timestamp_step4, \"readonly_flag\":False}\n        return mp_details\n\n    def step1(self,mp_request_name,buyer_public_key_hash,buyer_public_key_hex,requested_amount,smart_contract_ref,new_user_flag,buyer_reput_trans,buyer_reput_reliability):\n        if buyer_public_key_hash is not None and 'None' not in buyer_public_key_hash:\n            if self.step==0:\n                self.mp_request_name=mp_request_name\n                self.buyer_public_key_hash=buyer_public_key_hash\n                self.buyer_public_key_hex=buyer_public_key_hex\n                self.requested_amount=requested_amount\n                self.timestamp_nig=datetime.timestamp(datetime.utcnow())\n                self.requested_nig=CONVERT_2_NIG(requested_amount,self.timestamp_nig,self.requested_currency)\n                self.step=1\n                self.smart_contract_ref=smart_contract_ref\n                self.timestamp_step1=datetime.timestamp(datetime.utcnow())\n                if new_user_flag==\"true\" or new_user_flag==\"True\":new_user_flag=True\n                if new_user_flag==\"false\" or new_user_flag==\"False\":\n                    new_user_flag=False\n                    self.requested_deposit=CONVERT_2_NIG(requested_amount,self.timestamp_nig,self.requested_currency)*GET_BUYER_SAFETY_COEF()\n                self.new_user_flag=new_user_flag\n                self.buyer_reput_trans=buyer_reput_trans\n                self.buyer_reput_reliability=buyer_reput_reliability\n            else:raise ValueError('request cannot be confirmed in step 1')\n        else:raise ValueError('Please select a buyer')\n\n    def step2(self,seller_public_key_hash,seller_public_key_hex,encrypted_account,mp_request_signature):\n        if seller_public_key_hash is not None and 'None' not in seller_public_key_hash:\n            if self.step==1:\n                self.seller_public_key_hash=seller_public_key_hash\n                self.seller_public_key_hex=seller_public_key_hex\n                self.timestamp_nig=datetime.timestamp(datetime.utcnow())\n                self.requested_nig_step2=copy.deepcopy(self.requested_nig)\n                self.requested_nig_step2_flag=True\n                self.requested_nig=CONVERT_2_NIG(self.requested_amount,self.timestamp_nig,self.requested_currency)\n                self.encrypted_account=encrypted_account\n                self.mp_request_signature=mp_request_signature\n                self.step=2\n                self.timestamp_step2=datetime.timestamp(datetime.utcnow())\n            else:raise ValueError('request cannot be confirmed in step 2')\n        else:raise ValueError('Please select a seller')\n            \n\n    def step3(self,mp_request_signature):\n        if self.step==2:\n            self.mp_request_signature=mp_request_signature\n            self.step=3\n            self.timestamp_step3=datetime.timestamp(datetime.utcnow())\n        else:raise ValueError('request cannot be confirmed in step 3')\n\n    def step4(self,mp_request_signature):\n        if self.step==3:\n            self.mp_request_signature=mp_request_signature\n            self.step=4\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n            self.reputation_buyer=1\n            self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in step 4')\n\n    def step45(self,mp_request_signature):\n        if self.step==3:\n            self.mp_request_signature=mp_request_signature\n            self.step=45\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n            self.reputation_buyer=-1\n            self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in step 45')\n\n    def check_cancellation(self,mp_request_signature):\n        if self.step<3:\n          self.mp_request_signature=mp_request_signature\n          self.step=99\n          self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n        else:raise ValueError('request cannot be confirmed in cancellation')\n\n    def check_payment_default(self,mp_request_signature):\n        if self.step==3:\n          self.mp_request_signature=mp_request_signature\n          self.step=66\n          self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n          self.reputation_buyer=-1\n          self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in payment default')\n\n    def validate_step(self):\n        signature_decoded = binascii.unhexlify(self.mp_request_signature.encode(\"utf-8\"))\n        if self.step==2 or self.step==4 or self.step==45 or self.step==66:\n            public_key_bytes = self.seller_public_key_hex.encode(\"utf-8\")\n        elif self.step==3 or self.step==99:\n            public_key_bytes = self.buyer_public_key_hex.encode(\"utf-8\")\n        else:\n            raise ValueError(f'request not in predefined step:{self.step}')\n      \n        public_key_object = RSA.import_key(binascii.unhexlify(public_key_bytes))\n        transaction_bytes = json.dumps(self.get_mp_details(self.step), indent=2).encode('utf-8')\n        transaction_hash = SHA256.new(transaction_bytes)\n        pkcs1_15.new(public_key_object).verify(transaction_hash, signature_decoded)\n\n    def check_expiration(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        return self.check_expiration_raw(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,False)\n\n    def validate_expiration(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        return self.check_expiration_raw(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,True)\n\n    def check_expiration_raw(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,error_flag):\n        expiration_flag=False\n        check_now=datetime.timestamp(datetime.utcnow())\n        if self.step==1 and check_now-self.timestamp_step1>MARKETPLACE_STEP1_EXPIRATION:expiration_flag=True\n        if self.step==2 and check_now-self.timestamp_step2>MARKETPLACE_STEP2_EXPIRATION:\n            self.reputation_buyer=-1\n            expiration_flag=True\n        if self.step==3 and check_now-self.timestamp_step3>MARKETPLACE_STEP3_EXPIRATION:\n            self.reputation_seller=-1\n            expiration_flag=True\n        if expiration_flag is True:\n            self.step=98\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n        else:\n            if error_flag is True:ValueError('smart_contract is not expired')\n        return expiration_flag\n\t\t\n    def get_mp_info_and_expiration(self,step,user_public_key_hash,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        mp_info=self.get_mp_info(step,user_public_key_hash)\n        expiration=self.check_expiration(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION)\n        return mp_info,expiration,self.requested_amount,self.step\n\n    def cancel(self,user_public_key_hash,mp_request_signature):\n        if self.step<3 and self.buyer_public_key_hash==user_public_key_hash:\n            CANCEL_SC(self.smart_contract_ref,self.step,mp_request_signature)\n        else:\n            raise ValueError(f'Cancellation not possible in step:{self.step} for user:{user_public_key_hash}')\n\n    def payment_default(self,user_public_key_hash,mp_request_signature):\n        if self.step==3 and self.seller_public_key_hash==user_public_key_hash:\n            PAYMENT_DEFAULT_SC(self.smart_contract_ref,self.step,mp_request_signature)\n        else:\n            raise ValueError(f'payment default not possible in step:{self.step} for user:{user_public_key_hash}')\n\n"]]], "smart_contract_memory_size": 228, "smart_contract_new": true, "smart_contract_payload": "\n###VERSION:1\n###END\nclass MarketplaceRequestCode:\n    def __init__(self):\n        self.code='''\n###VERSION:1\n###END\nclass MarketplaceRequest:\n    def __init__(self):\n        self.account=None\n        self.step=0\n        self.new_user_flag=False\n        self.timestamp=datetime.timestamp(datetime.utcnow())\n        self.timestamp_step1=None\n        self.timestamp_step2=None\n        self.timestamp_step3=None\n        self.timestamp_step4=None\n        self.requested_amount=0\n        self.requested_currency='EUR'\n        self.requested_deposit=0\n        self.requested_nig=0\n        self.requested_nig_step2=None\n        self.requested_nig_step2_flag=False\n        self.timestamp_nig=None\n        self.buyer_public_key_hex=None\n        self.buyer_public_key_hash=None\n        self.buyer_public_key_hash=None\n        self.buyer_reput_trans=0\n        self.buyer_reput_reliability=0\n        self.seller_public_key_hex=\"\"\n        self.seller_public_key_hash=\"\"\n        self.encrypted_account=\"\"\n        self.mp_request_signature=None\n        self.mp_request_id=random.randint(10000000, 99999999)\n        self.previous_mp_request_name=None\n        self.mp_request_name=None\n        self.seller_safety_coef=GET_SELLER_SAFETY_COEF()\n        self.smart_contract_ref=None\n        self.reputation_buyer=0\n        self.reputation_seller=0\n\n    def get_mp_details(self,step):\n        mp_details = [self.timestamp,self.buyer_public_key_hash,self.buyer_public_key_hex,self.requested_amount,self.mp_request_id]\n        if self.requested_nig_step2_flag is True:requested_nig=self.requested_nig_step2\n        else:requested_nig=self.requested_nig\n        if self.step>=1:\n            self.seller_safety_coef=GET_SELLER_SAFETY_COEF()\n            mp_details.extend([requested_nig,self.seller_safety_coef])\n        if self.step>=2:mp_details.extend([self.seller_public_key_hex,self.seller_public_key_hash,self.requested_deposit])\n        if self.step==99:mp_details.append(\"cancellation\")\n        if self.step==66:mp_details.append(\"payment default\")\n        return mp_details\n\n    def get_requested_deposit(self):\n        return self.requested_deposit\n\n    def get_new_user_flag(self):\n        return self.new_user_flag\n\n    def get_reputation(self):\n        if self.reputation_buyer!=0 or self.reputation_seller!=0:return {self.buyer_public_key_hash:self.reputation_buyer,self.seller_public_key_hash:self.reputation_seller}\n        else:return None\n\n    def get_mp_info(self,step,user_public_key_hash):\n        try:step=int(step)\n        except:step=99\n        mp_details=None\n        flag=False\n        readonly_flag=False\n        if self.step!=4 and self.step!=45 and self.step!=66 and self.step!=98 and self.step!=99:\n            if step==1:\n                flag=True\n                if self.buyer_public_key_hash==user_public_key_hash:readonly_flag=True\n            if step==2:\n                if self.buyer_public_key_hash==user_public_key_hash:flag=True\n                if self.step==1:readonly_flag=True\n                if self.step==3:readonly_flag=True\n            if step==3:\n                if self.seller_public_key_hash==user_public_key_hash:flag=True\n                if self.step==2:readonly_flag=True\n            if flag is True:\n                mp_details = {\"timestamp_nig\": self.timestamp,\"requester_public_key_hash\": self.buyer_public_key_hash,\"requester_public_key_hex\": self.buyer_public_key_hex,\"seller_public_key_hash\": self.seller_public_key_hash,\"requested_amount\": self.requested_amount,\"requested_currency\":self.requested_currency,\"requested_nig\": self.requested_nig,\"payment_ref\": self.mp_request_name}\n                mp_details['seller_public_key_hex']=self.seller_public_key_hex\n                mp_details['encrypted_account']=self.encrypted_account\n                mp_details['smart_contract_ref']=self.smart_contract_ref\n                mp_details['readonly_flag']=readonly_flag\n                mp_details['buyer_reput_trans']=self.buyer_reput_trans\n                mp_details['buyer_reput_reliability']=self.buyer_reput_reliability\n                mp_details['step']=self.step\n        return mp_details\n\n    def get_mp_info_archive(self,step):\n        mp_details=None\n        if step==self.step:\n            mp_details = {\"timestamp_nig\": self.timestamp_step4, \"readonly_flag\":False}\n        return mp_details\n\n    def step1(self,mp_request_name,buyer_public_key_hash,buyer_public_key_hex,requested_amount,smart_contract_ref,new_user_flag,buyer_reput_trans,buyer_reput_reliability):\n        if buyer_public_key_hash is not None and 'None' not in buyer_public_key_hash:\n            if self.step==0:\n                self.mp_request_name=mp_request_name\n                self.buyer_public_key_hash=buyer_public_key_hash\n                self.buyer_public_key_hex=buyer_public_key_hex\n                self.requested_amount=requested_amount\n                self.timestamp_nig=datetime.timestamp(datetime.utcnow())\n                self.requested_nig=CONVERT_2_NIG(requested_amount,self.timestamp_nig,self.requested_currency)\n                self.step=1\n                self.smart_contract_ref=smart_contract_ref\n                self.timestamp_step1=datetime.timestamp(datetime.utcnow())\n                if new_user_flag==\"true\" or new_user_flag==\"True\":new_user_flag=True\n                if new_user_flag==\"false\" or new_user_flag==\"False\":\n                    new_user_flag=False\n                    self.requested_deposit=CONVERT_2_NIG(requested_amount,self.timestamp_nig,self.requested_currency)*GET_BUYER_SAFETY_COEF()\n                self.new_user_flag=new_user_flag\n                self.buyer_reput_trans=buyer_reput_trans\n                self.buyer_reput_reliability=buyer_reput_reliability\n            else:raise ValueError('request cannot be confirmed in step 1')\n        else:raise ValueError('Please select a buyer')\n\n    def step2(self,seller_public_key_hash,seller_public_key_hex,encrypted_account,mp_request_signature):\n        if seller_public_key_hash is not None and 'None' not in seller_public_key_hash:\n            if self.step==1:\n                self.seller_public_key_hash=seller_public_key_hash\n                self.seller_public_key_hex=seller_public_key_hex\n                self.timestamp_nig=datetime.timestamp(datetime.utcnow())\n                self.requested_nig_step2=copy.deepcopy(self.requested_nig)\n                self.requested_nig_step2_flag=True\n                self.requested_nig=CONVERT_2_NIG(self.requested_amount,self.timestamp_nig,self.requested_currency)\n                self.encrypted_account=encrypted_account\n                self.mp_request_signature=mp_request_signature\n                self.step=2\n                self.timestamp_step2=datetime.timestamp(datetime.utcnow())\n            else:raise ValueError('request cannot be confirmed in step 2')\n        else:raise ValueError('Please select a seller')\n            \n\n    def step3(self,mp_request_signature):\n        if self.step==2:\n            self.mp_request_signature=mp_request_signature\n            self.step=3\n            self.timestamp_step3=datetime.timestamp(datetime.utcnow())\n        else:raise ValueError('request cannot be confirmed in step 3')\n\n    def step4(self,mp_request_signature):\n        if self.step==3:\n            self.mp_request_signature=mp_request_signature\n            self.step=4\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n            self.reputation_buyer=1\n            self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in step 4')\n\n    def step45(self,mp_request_signature):\n        if self.step==3:\n            self.mp_request_signature=mp_request_signature\n            self.step=45\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n            self.reputation_buyer=-1\n            self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in step 45')\n\n    def check_cancellation(self,mp_request_signature):\n        if self.step<3:\n          self.mp_request_signature=mp_request_signature\n          self.step=99\n          self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n        else:raise ValueError('request cannot be confirmed in cancellation')\n\n    def check_payment_default(self,mp_request_signature):\n        if self.step==3:\n          self.mp_request_signature=mp_request_signature\n          self.step=66\n          self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n          self.reputation_buyer=-1\n          self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in payment default')\n\n    def validate_step(self):\n        signature_decoded = binascii.unhexlify(self.mp_request_signature.encode(\"utf-8\"))\n        if self.step==2 or self.step==4 or self.step==45 or self.step==66:\n            public_key_bytes = self.seller_public_key_hex.encode(\"utf-8\")\n        elif self.step==3 or self.step==99:\n            public_key_bytes = self.buyer_public_key_hex.encode(\"utf-8\")\n        else:\n            raise ValueError(f'request not in predefined step:{self.step}')\n      \n        public_key_object = RSA.import_key(binascii.unhexlify(public_key_bytes))\n        transaction_bytes = json.dumps(self.get_mp_details(self.step), indent=2).encode('utf-8')\n        transaction_hash = SHA256.new(transaction_bytes)\n        pkcs1_15.new(public_key_object).verify(transaction_hash, signature_decoded)\n\n    def check_expiration(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        return self.check_expiration_raw(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,False)\n\n    def validate_expiration(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        return self.check_expiration_raw(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,True)\n\n    def check_expiration_raw(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,error_flag):\n        expiration_flag=False\n        check_now=datetime.timestamp(datetime.utcnow())\n        if self.step==1 and check_now-self.timestamp_step1>MARKETPLACE_STEP1_EXPIRATION:expiration_flag=True\n        if self.step==2 and check_now-self.timestamp_step2>MARKETPLACE_STEP2_EXPIRATION:\n            self.reputation_buyer=-1\n            expiration_flag=True\n        if self.step==3 and check_now-self.timestamp_step3>MARKETPLACE_STEP3_EXPIRATION:\n            self.reputation_seller=-1\n            expiration_flag=True\n        if expiration_flag is True:\n            self.step=98\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n        else:\n            if error_flag is True:ValueError('smart_contract is not expired')\n        return expiration_flag\n\t\t\n    def get_mp_info_and_expiration(self,step,user_public_key_hash,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        mp_info=self.get_mp_info(step,user_public_key_hash)\n        expiration=self.check_expiration(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION)\n        return mp_info,expiration,self.requested_amount,self.step\n\n    def cancel(self,user_public_key_hash,mp_request_signature):\n        if self.step<3 and self.buyer_public_key_hash==user_public_key_hash:\n            CANCEL_SC(self.smart_contract_ref,self.step,mp_request_signature)\n        else:\n            raise ValueError(f'Cancellation not possible in step:{self.step} for user:{user_public_key_hash}')\n\n    def payment_default(self,user_public_key_hash,mp_request_signature):\n        if self.step==3 and self.seller_public_key_hash==user_public_key_hash:\n            PAYMENT_DEFAULT_SC(self.smart_contract_ref,self.step,mp_request_signature)\n        else:\n            raise ValueError(f'payment default not possible in step:{self.step} for user:{user_public_key_hash}')\n\n'''\nmarketplace_request_code=MarketplaceRequestCode()\nmemory_list.add([marketplace_request_code,'marketplace_request_code',['code']])\n123456\n", "smart_contract_previous_transaction": null, "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1717152088.259863, "transaction_hash": "ba0a07ecb7d7150f798619f3c8c25495bdcb2ca16ab96afc53a494e83f46ecfe"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "abcd1234", "unlocking_public_key_hash": "abcd1234_0", "unlocking_script": "4fbffce55fbc8d06c226998969e7a9f8e58712256a78a87ce9f54943925789a24b68eb30daf2d98528a3cb7700e89dd8e06cd58dd25d7583f5907b0b68982347c054f6adf6c147e6f99ce68e2c09435c671da9e3c5e97c9456549c36d212dd5f3e423ba8bae9a00ceb27c614cd58d9b4431f37c439595c0db7dd2bb1158a0179c666ce03c679d7d5961704eb17ba5330cdfe2e658cdd94f1cf6b1f4b6484a76d57a50ba4f5ebeebb410e7372486058c410c89e6b93c9ccfe32e53aae840cca52d7ea6c2ca09e6068288c84c176cfb13178a509abd6c387aaba709243f9c9a59f866a41d8916d1112ea1ea319f39267d586f1b35733f8c4047e95b15d18ad5204 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 9ee93ba03f12c3a9e04b7982b5e4b657654aa74a", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "9ee93ba03f12c3a9e04b7982b5e4b657654aa74a", "smart_contract_flag": true, "smart_contract_gas": 999771.8997, "smart_contract_memory": [["Contest", "contest", ["participant_list", "ranking"], [[], {"ranking": []}]]], "smart_contract_memory_size": 228, "smart_contract_new": true, "smart_contract_payload": "\n###VERSION:1\n###END\nclass Contest:\n    def __init__(self):\n        self.participant_list=[]\n        self.ranking={'ranking': []}\n\n    def add_participant(self,public_key_hash,smart_contract_account):\n        if self.check_participant(public_key_hash) is False:self.participant_list.append([public_key_hash,smart_contract_account])\n\n    def check_participant(self,public_key_hash):\n        if public_key_hash in [y[0] for y in self.participant_list]:return True\n        else:return False\n\n    def remove_participant(self,public_key_hash):\n        for item in [y for y in self.participant_list if y[0]==public_key_hash]:\n            self.participant_list.remove(smart_contract_account)\n\n    def get_smart_contract(self,public_key_hash):\n        result=None\n        for item in self.participant_list:\n            if public_key_hash==item[0]:\n                result=item[1]\n                break\n        return result\n\n    def get_ranking(self):\n        raw_ranking=[]\n        for item in self.participant_list:\n            try:\n                payload='''\nmemory_obj_2_load=['participant']\nparticipant.get_score_data()\n'''\n                result=LOAD_SC(item[1],payload)\n                if result is not None:raw_ranking.append(result)\n            except:pass\n        counter=1\n        for item in sorted(raw_ranking, key=lambda d: d[1],reverse = True):\n            item.insert(0,counter)\n            self.ranking['ranking'].append(item)\n            counter+=1\n        return self.ranking\n        \n        \ncontest=Contest()\nmemory_list.add([contest,'contest',['participant_list','ranking']])\n123456\n", "smart_contract_previous_transaction": null, "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1717152088.281629, "transaction_hash": "df4a967ba96f9ea8361b967a1ef45e46c579363ad5f961b8f24a1adcb50a2400"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "abcd1234", "unlocking_public_key_hash": "abcd1234_0", "unlocking_script": "33def24b87b81469d332c5bba112a424e59deec85bc40ea95d70573a30b2fa8b13496ad51f5cb490d3f09c61cb2976f51fd051bfed76f0c87770741ad10c54d5782731aa482c695a7070f2c51e04afe40085765d7d04aa9ea70f6612d2dfc986cbde27349f497437069e937ee03573588169d8c8d4a03654fd65e7de07a720989cf86ba21737668f9ca6aaeb54552c89f1476cc0bb20316d5c4801fec9f76046f14f9a10ccb383bcdcce1dad47c7abac531bcb280c2f97bd953188d28a4decbc85e94ccf045ca0971432c63cae0be9f3dc701a41c60a9d564de2e717bd072e1cdd776f29f5bdbcf4bdfd5784db5875f78ea9bfeebf83b71e495798f7754e8734 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 7c2043277fc30413cdfa5224d228c449ef2586c9", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "7c2043277fc30413cdfa5224d228c449ef2586c9", "smart_contract_flag": true, "smart_contract_gas": 999772.0, "smart_contract_memory": [["ReputationCode", "reputation_code", ["code"], ["\n###VERSION:1\n\nclass Reputation:\n    def __init__(self):\n        self.nb_transaction=0\n        self.nb_pos=0\n        self.nb_neg=0\n\n    def get_reputation(self):\n        if self.nb_transaction==0:reliability=0\n        else:reliability=max(0,round(((float(self.nb_pos)-float(self.nb_neg))/float(self.nb_transaction))*100,2))\n        return [self.nb_transaction,reliability]\nreputation=Reputation()\nmemory_list.add([reputation,'reputation',['nb_transaction','nb_pos','nb_neg']])\n"]]], "smart_contract_memory_size": 228, "smart_contract_new": true, "smart_contract_payload": "\n###VERSION:1\n###END\nclass ReputationCode:\n    def __init__(self):\n        self.code='''\n###VERSION:1\n###END\nclass Reputation:\n    def __init__(self):\n        self.nb_transaction=0\n        self.nb_pos=0\n        self.nb_neg=0\n\n    def get_reputation(self):\n        if self.nb_transaction==0:reliability=0\n        else:reliability=max(0,round(((float(self.nb_pos)-float(self.nb_neg))/float(self.nb_transaction))*100,2))\n        return [self.nb_transaction,reliability]\nreputation=Reputation()\nmemory_list.add([reputation,'reputation',['nb_transaction','nb_pos','nb_neg']])\n'''\nreputation_code=ReputationCode()\nmemory_list.add([reputation_code,'reputation_code',['code']])\n123456\n", "smart_contract_previous_transaction": null, "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1717152088.295539, "transaction_hash": "c146735b6beb56610f5d6a38060fa5c9b483255bc0d2c66cf6592bf92e1cc245"}]}]