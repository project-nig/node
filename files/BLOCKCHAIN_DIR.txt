[{"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "abcd1234", "unlocking_public_key_hash": "abcd1234_0", "unlocking_script": ""}], "outputs": [{"account": null, "amount": 1000000.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 1af8595f1c5dd87607e162d69f4109fae2ef022c OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639"}], "timestamp": 1718369664.014323, "transaction_hash": "b1837ae91f7c08d9aef6c1ce3c23b307a3efcbb0e4d835bf23d6c381dbe64c12"}, {"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "abcd1234", "unlocking_public_key_hash": "abcd1234_0", "unlocking_script": "9645cf0adeced0377da6b51e078b37cf556f01d401550a5280d91cf56c392fba38326dbe8dc17e6979764b2e8cb89110ac8029b698cb6670908d69fa443ef3fb63d29e3a9c4f9b7a6e7a40af6ff728863d87ac6d616777dbd39ed3a4692dd6f27640c8b0cf3d534767b391b1dfa2f20033ba7a2f472344739f788f0235c5c73a332e7391b6fc92c24d1d8149f927143f70a16010823335dc3b266d7f712b299153a885728b47a3edf62d41e5f854c8a321589f195a6c1317bbcca82c8468bbf29239619c352f6214d657d2c53d36dde1673b4993fa8bc5ff076a20dc13ec2148273e6ca292821164162cc5523b5df894883d67e8e6d8ed32450970c81dde03d1 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "smart_contract_flag": true, "smart_contract_gas": 999771.8856, "smart_contract_memory": [["NodeNetwork", "node_network", ["node_dict"], [{}]]], "smart_contract_memory_size": 228, "smart_contract_new": true, "smart_contract_payload": "\n###VERSION:1\n###END\nclass NodeNetwork:\n    def __init__(self):\n        self.node_dict={}\n\n    def add_node(self,node_input_dict):\n        node_dict_temp=self.node_dict.copy()\n        node_public_key_hash=node_input_dict['node_public_key_hash']\n        node_public_key_hex=node_input_dict['node_public_key_hex']\n        node_url=node_input_dict['node_url']\n        try:\n            node_dict_temp[node_public_key_hash]\n        except:\n            new_node_dict={}\n            new_node_dict['creation']=datetime.timestamp(datetime.utcnow())\n            new_node_dict['public_key_hex']=node_public_key_hex\n            new_node_dict['node_url']=node_url\n            new_node_dict['active']=True\n            node_dict_temp[node_public_key_hash]=new_node_dict\n            self.node_dict=node_dict_temp\n\n    def get_public_key_hash(self,node_url):\n        public_key_hash=None\n        for item in [i for i in self.node_dict.items() if i[1]['node_url']==node_url]:\n            public_key_hash=item[0]\n        return public_key_hash\n\n    def get_public_key_hex(self,node_public_key_hash):\n        public_key_hex=None\n        try:\n            public_key_hex=self.node_dict[node_public_key_hash]['public_key_hex']\n        except:pass\n        return public_key_hex\n\n    def active_node(self,node_public_key_hash):\n        try:\n            self.node_dict[node_public_key_hash]['active']=True\n        except:pass\n\n    def deactive_node(self,node_public_key_hash):\n        try:\n            self.node_dict[node_public_key_hash]['active']=False\n        except:pass\n\n    def remove_node(self,node_public_key_hash):\n        try:del self.node_dict[node_public_key_hash]\n        except:pass\n        \nnode_network=NodeNetwork()\nmemory_list.add([node_network,'node_network',['node_dict']])\n123456\n", "smart_contract_previous_transaction": null, "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1718369664.018137, "transaction_hash": "e7e0a121b5569bbf9b41628f9749fa9c197eccf85d808d59917aed48f8d6abba"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "b1837ae91f7c08d9aef6c1ce3c23b307a3efcbb0e4d835bf23d6c381dbe64c12", "unlocking_public_key_hash": "1af8595f1c5dd87607e162d69f4109fae2ef022c", "unlocking_script": "99b7e29ea69918ce5d664397e89e8bb94d2bf032ff131d2f620c386e9443d16c807a5bb6ab54f18ebe46615a57d3d211e3130f4f2e216253c103d0a3fa3ad85d367ff45da1b5c24e81bb23c04c6c75d2522560efbf3ba7e1fb14d8430b217fc882035f05fb7df60d1ddc3754e5048cfd6b2ae09425d997b9beb02636f5b7bc421349566023db9815d9dfb8b0160e131e86fbc020dc5f70888a1c977474a49db8dc84e37e4cec9888ce62c28671b0929f9f6727d0e3917d8f08f6822e5a29ec3f2a44879c5a777ad3c0dfc6016af2b205f142e76a8e41cc3a2929868d12df22497bebe35eeb6dfa70df5e2f094df05347106decf0c0db469b64084337e2365178 30820122300d06092a864886f70d01010105000382010f003082010a0282010100d5cfa273764e9e8fcbcb49f2f69a6639f5161a12d9813d9a53be409ecb77a30d68c3175fe314276a6897a057f351ea5a6cff1811e8c17a8af04823eae1d24264cfa9f7f958ed86f03caea088e593ee567c25bd99d3dabd194b612a823da29a8009c869ef6c334588cc733b6fb7491eca11e7d627130136c6aca0dc876d76944805efcf6901c7e0d9fb5c2a1ef9aab2bed0a3b5231df0dc229b524e0bbf68a9cb2c82b97d01d3e86b097968bef0ebebea6089d4023412299b9c16024bd8dda7cfbb02576c04db89fac1d16ca248de6abebedc78ef2a64a6753c55a3927ce6215850dc5c55145cb584e9e5a6e49309bf78e4c343005ac967667286bcd320c4f61b0203010001"}], "outputs": [{"account": null, "amount": 500000.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 d65478e5aa6b64418ec7375126c20973e65aa61f OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639"}, {"account": null, "amount": 500000.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 1af8595f1c5dd87607e162d69f4109fae2ef022c OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639"}], "timestamp": 1718369664.050775, "transaction_hash": "692b0301204719446093c3da8ead8eca7b6aa8fa476e8670bd58aafdff03683e"}, {"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "e7e0a121b5569bbf9b41628f9749fa9c197eccf85d808d59917aed48f8d6abba", "unlocking_public_key_hash": "31f2ac8088005412c7b031a6e342b17a65a48d01 SC 5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "unlocking_script": "5f7ddb391d82ea685a3c66f8865235920d53aa3657406e8aa28324d2c1447189c1a45aa7091380182a310e4e39e2aa663aa9ffbb90c93aebc47b5fa2045f33c09a5a23b20eb25a9662850d34da5e82a80eb4923e3ca5d70139b50dfb73b62ce7bf29b09b844f069845aeebe2eb231ef977a66fded4ce50562ca3f2418adbfffb2a9f28e483b9e2ba9e1d85c6d79dd771c477cfce85be34a7f7a956133ebc684e68739d5e485f2a09864e0f8160fdd47d5d0e84efd04bfad665b6a741583cb5494d5e26fe33eecf693b25e25cfc158b8ad9732d7690254236eb5b504288169ff75cfad9ec99c1344713f2546046f1bacb5f1b5be1edb6ae1ad4c3308a80d0859f 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "smart_contract_flag": true, "smart_contract_gas": 996670.7415, "smart_contract_memory": [["NodeNetwork", "node_network", ["node_dict"], [{"26de30d33746bc6053e4dd9971270366da6db50b": {"active": true, "creation": 1718369664.058926, "node_url": "127.0.0.2:5000", "public_key_hex": "30820122300d06092a864886f70d01010105000382010f003082010a0282010100dd7cff0df3d62747f6a6c43efc9e36741760c1acddc464a60be6727dfcc97a0ecf3b468e8f3c3a8eaba2e5df1a454acf2e478cbcaf88f0f36fc4c61afedb54bc597200ec781fabb490f70ce3086e34f9a3b500abc72bb9193dcac434207b54c4008cf9641b5e34ee24128028c599b31f302aef00cf20fb9c4a6f29831c0ce649799ecd1e97ecf71cd2a4ee39f96936a4f5f8f7f96cd4bb49e46d4ea7f068429c9b33a8c47449708dc78b926a67603f9bafacd4d8c2ba3d745b36c9f37a648d4240d4600073da56fcccf86a4e4437a3bf091b7b25e8bfd6f66e41e3d9110f9d8dc26cff2b77cb8e5dae4de8db77a0d9173de3561b4c409353dcd6f592c2b33fcb0203010001"}}]]], "smart_contract_memory_size": 3101, "smart_contract_new": false, "smart_contract_payload": "\nmemory_obj_2_load=['node_network']\nnode_public_key_hash=\"26de30d33746bc6053e4dd9971270366da6db50b\"\nnode_public_key_hex=\"30820122300d06092a864886f70d01010105000382010f003082010a0282010100dd7cff0df3d62747f6a6c43efc9e36741760c1acddc464a60be6727dfcc97a0ecf3b468e8f3c3a8eaba2e5df1a454acf2e478cbcaf88f0f36fc4c61afedb54bc597200ec781fabb490f70ce3086e34f9a3b500abc72bb9193dcac434207b54c4008cf9641b5e34ee24128028c599b31f302aef00cf20fb9c4a6f29831c0ce649799ecd1e97ecf71cd2a4ee39f96936a4f5f8f7f96cd4bb49e46d4ea7f068429c9b33a8c47449708dc78b926a67603f9bafacd4d8c2ba3d745b36c9f37a648d4240d4600073da56fcccf86a4e4437a3bf091b7b25e8bfd6f66e41e3d9110f9d8dc26cff2b77cb8e5dae4de8db77a0d9173de3561b4c409353dcd6f592c2b33fcb0203010001\"\nnode_url=\"127.0.0.2:5000\"\n\nnode_input_dict={}\nnode_input_dict['node_public_key_hash']=node_public_key_hash\nnode_input_dict['node_public_key_hex']=node_public_key_hex\nnode_input_dict['node_url']=node_url\nnode_network.add_node(node_input_dict)\nmemory_list.add([node_network,'node_network',['node_dict']])\n123456\n", "smart_contract_previous_transaction": "e7e0a121b5569bbf9b41628f9749fa9c197eccf85d808d59917aed48f8d6abba_0", "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1718369664.059242, "transaction_hash": "80c9fc14d38d871f5523bc32943c50eab6c4b582aabe9b565a96598811426ac3"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 1, "transaction_hash": "692b0301204719446093c3da8ead8eca7b6aa8fa476e8670bd58aafdff03683e", "unlocking_public_key_hash": "d65478e5aa6b64418ec7375126c20973e65aa61f", "unlocking_script": "67e59eea6b271e71d1ae49633dab83de09bf2b8d3ac2bee9acb6132a907807d33e33f050756c6029c284148f6e9e784c423cc56d2800af77d0387ee8a783b196fe77f7af25895d3997a0a864990b3b31c234f77e9fac081376f5235d7ca08e1a29dcde54f941380d676ac9a0292c54eeaae97db88c3e3b5d75433143ae196ecdd83c5941a09e1a4fb75d47421c5cfb6ff381a06e53e1d4c851357842cafca0a79532a74ade6c1757048c32560172384efb4f0c618b9477ae4698516dbbb617fc2846eccbc8e246905210098bc36288f41ffd176dd592b6aa46166353d3ecd566458b4f65e8f60fd4f3e17254941f45d9c154f9c1e5a49127b0b8b9f694c80c95 30820122300d06092a864886f70d01010105000382010f003082010a0282010100b0db1c502904cfb7c17d0682ea6c9b9fe37a74f2f1bd9c701579ba67ee2384ced71aa9241098a1d5c09683fee4a02912c8172cbd5ed5edeb22a17560e3bb373ca2e2e1f45f81c849292d084ae6fca85911207c31ba177d8ae5752be0654c030e889367bf59f793cfb8079b78dfd36f85c96f15ef88f67fcf32dca86070ae2c48e4abbc8f51ff810d45c2e50017eb3a1353f4568aa577aea425e42afb6e9eaaa2c1d8c34bd48fed8a6abd6383d2ec2ba3e40b82f770b9aa281016de245e1f70a544858db5cb7a0134a5e56141f014421109c3f799283cbfdf90e4e1428aced0c35b8291e4595bef25e9047e54ca8b693b6b7a0332ed10c9f6bedd04194aa38f250203010001"}], "outputs": [{"account": null, "amount": 100000.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 84d7eee902bf978d379aa988da0068d71e0037a7 OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639"}], "timestamp": 1718369664.080853, "transaction_hash": "0b4efe79cced953a44b6f7464e45fbb09ddd289671dc93e0e75b740d51bbe9be"}, {"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "80c9fc14d38d871f5523bc32943c50eab6c4b582aabe9b565a96598811426ac3", "unlocking_public_key_hash": "31f2ac8088005412c7b031a6e342b17a65a48d01 SC 5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "unlocking_script": "60ff62f80514c2f32c838fc93cda41dcad12df5d0a3f967147c784d6c2de63c0e5d7cfd50de9c2da1c379e283003fe8443dc7cb99b169fdcd72b86b2f481478d44f13aa64181a6db5d5388a44aa8f08c53676c8d614ec07a447ef2a3969a1a1a520cdd79dbbccc4859ff8ba06b5886e7d5d505af1c3a305c0dac4e0efcacdaf6092e7a3a4c1c06fe2206e9919b7f8199d888a1b4cfe2f0464b102f93dfa645acadce972ccb8125cc89d995531048c4f81cd679eea9fb29861fcbb5d7378fe609e69827637a68bf9468fc71e305ef6aca50dde87d45f113b53b2f8ed6a60175be19607c51c39522eaa2a68b59dff0c6231809e86576d817dc596b2464389ffb05 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "5cc2ffa6c7f08b5ff101cc6ae6ce2f5ce36176ae", "smart_contract_flag": true, "smart_contract_gas": 992838.6942, "smart_contract_memory": [["NodeNetwork", "node_network", ["node_dict"], [{"26de30d33746bc6053e4dd9971270366da6db50b": {"active": true, "creation": 1718369664.058926, "node_url": "127.0.0.2:5000", "public_key_hex": "30820122300d06092a864886f70d01010105000382010f003082010a0282010100dd7cff0df3d62747f6a6c43efc9e36741760c1acddc464a60be6727dfcc97a0ecf3b468e8f3c3a8eaba2e5df1a454acf2e478cbcaf88f0f36fc4c61afedb54bc597200ec781fabb490f70ce3086e34f9a3b500abc72bb9193dcac434207b54c4008cf9641b5e34ee24128028c599b31f302aef00cf20fb9c4a6f29831c0ce649799ecd1e97ecf71cd2a4ee39f96936a4f5f8f7f96cd4bb49e46d4ea7f068429c9b33a8c47449708dc78b926a67603f9bafacd4d8c2ba3d745b36c9f37a648d4240d4600073da56fcccf86a4e4437a3bf091b7b25e8bfd6f66e41e3d9110f9d8dc26cff2b77cb8e5dae4de8db77a0d9173de3561b4c409353dcd6f592c2b33fcb0203010001"}, "f6bf165beeb8e1a18210ba69d0705c5ab9a72dd8": {"active": true, "creation": 1718369664.089334, "node_url": "127.0.0.3:5000", "public_key_hex": "30820122300d06092a864886f70d01010105000382010f003082010a0282010100ca950ba771a764a4e7d97d51b16c81648535237acdde7e00cb7f90a5fe343d58b6d53b8823af2dde95093d7418da12262e3d02bf32c93adc5627359b9163f2dab81f205866a55dffb8f7bf6ba1a10b3dbdd6f604ca80deef52558f9efa6035eee7bb042728e9a428ef587056874000dd4e88e0c962f581682284feec8c8c40913b60bb2160e35eba480ab531e58994ce4fec18263490a2e2ceeb567c49f4aed1b03f9af41426b33a1865163284303adfdfe4a5be26a71621acc41f1de4893ccd89f2224c09281fbf65c776468fc2f85c57774d11175f36eae4d16dc71b04cde2efc0e467a2d2531b5f01beba3187e1c5b14caa0bf206d503788c6ac57b6126590203010001"}}]]], "smart_contract_memory_size": 3832, "smart_contract_new": false, "smart_contract_payload": "\nmemory_obj_2_load=['node_network']\nnode_public_key_hash=\"f6bf165beeb8e1a18210ba69d0705c5ab9a72dd8\"\nnode_public_key_hex=\"30820122300d06092a864886f70d01010105000382010f003082010a0282010100ca950ba771a764a4e7d97d51b16c81648535237acdde7e00cb7f90a5fe343d58b6d53b8823af2dde95093d7418da12262e3d02bf32c93adc5627359b9163f2dab81f205866a55dffb8f7bf6ba1a10b3dbdd6f604ca80deef52558f9efa6035eee7bb042728e9a428ef587056874000dd4e88e0c962f581682284feec8c8c40913b60bb2160e35eba480ab531e58994ce4fec18263490a2e2ceeb567c49f4aed1b03f9af41426b33a1865163284303adfdfe4a5be26a71621acc41f1de4893ccd89f2224c09281fbf65c776468fc2f85c57774d11175f36eae4d16dc71b04cde2efc0e467a2d2531b5f01beba3187e1c5b14caa0bf206d503788c6ac57b6126590203010001\"\nnode_url=\"127.0.0.3:5000\"\n\nnode_input_dict={}\nnode_input_dict['node_public_key_hash']=node_public_key_hash\nnode_input_dict['node_public_key_hex']=node_public_key_hex\nnode_input_dict['node_url']=node_url\nnode_network.add_node(node_input_dict)\nmemory_list.add([node_network,'node_network',['node_dict']])\n123456\n", "smart_contract_previous_transaction": "80c9fc14d38d871f5523bc32943c50eab6c4b582aabe9b565a96598811426ac3_0", "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1718369664.090339, "transaction_hash": "1b722d0ba6a5abc60ee64ddfb4eb464d6223fcbdba511bccb841eae0f9b83860"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "692b0301204719446093c3da8ead8eca7b6aa8fa476e8670bd58aafdff03683e", "unlocking_public_key_hash": "d65478e5aa6b64418ec7375126c20973e65aa61f", "unlocking_script": "991d7545694485336ccb2c358d71fdae29e49383669adfc29de43aff338f836bf0517f177a289db8bb6b663ccbd91d121fc8888909784dbfeb89d322f10bb66fabf0122f2df9bc989356da9fe2a6c6344b5245eb9b58b9abed40f0c60cf59dfb2f9c1d40ca6ecfabe02787d956f7b4055404b45636dd2441cf6414163fdb6241fb57ae25784c5118a29f32308e6c7a9989940a9ee0e5a588fb7ab8fd23c9ef697ff5773224bac4307385bc8d2edc19f9287df63654b2fc044acb444d5f934e163c3e7821e8f9ec683f95f1dc3435e24192abc8895e40e7f654aa900cada4322c755cd61ca255bab3201dd3231eacdff545bcbd5fef129d5e11801300ff5394dc 30820122300d06092a864886f70d01010105000382010f003082010a0282010100b0db1c502904cfb7c17d0682ea6c9b9fe37a74f2f1bd9c701579ba67ee2384ced71aa9241098a1d5c09683fee4a02912c8172cbd5ed5edeb22a17560e3bb373ca2e2e1f45f81c849292d084ae6fca85911207c31ba177d8ae5752be0654c030e889367bf59f793cfb8079b78dfd36f85c96f15ef88f67fcf32dca86070ae2c48e4abbc8f51ff810d45c2e50017eb3a1353f4568aa577aea425e42afb6e9eaaa2c1d8c34bd48fed8a6abd6383d2ec2ba3e40b82f770b9aa281016de245e1f70a544858db5cb7a0134a5e56141f014421109c3f799283cbfdf90e4e1428aced0c35b8291e4595bef25e9047e54ca8b693b6b7a0332ed10c9f6bedd04194aa38f250203010001"}], "outputs": [{"account": null, "amount": 50000.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 84d7eee902bf978d379aa988da0068d71e0037a7 OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639"}, {"account": null, "amount": 450000.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 d65478e5aa6b64418ec7375126c20973e65aa61f OP_EQUAL_VERIFY OP_CHECKSIG", "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639"}], "timestamp": 1718369664.11275, "transaction_hash": "4f70a52c1daff48876b5db45e5d7878747a220f61a4cd40f24e3498b983fbc1a"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "692b0301204719446093c3da8ead8eca7b6aa8fa476e8670bd58aafdff03683e", "unlocking_public_key_hash": "", "unlocking_script": "8693efbfee99af0100f57a63fff44d372739f7930342e7818bc27fc1bfc93bad0fb0261ac782cf156effc9943412c450af6b1b974f8c85bc954da3ddb958a887d3edc79bf608711ae07719d16ace7ef10ab41bb6d67e94fb3783558b4fcd1d98b316c2299a39376df7fb69cad6bfad4d56d9b1379bce3c3ff86372b07455b3fe651f0ef3b7e5ae9848bb7bf9cf7ac78fb31cb9b83569ef368f1cde608e7ac93086c300bcf77c565b7f37fcd4ff749eba3c55b847dfc034f6db9aeb92724e967c0581e8af73e7b395a6fe8d155ae083c20cd1da04f2bb1838f01bf9f31f306daaeaf02875ab0131ee2c56e27912dbdaf0a9f3dda598dad37ec11f6553e95d0ade 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_flag": true, "smart_contract_gas": 999772.0, "smart_contract_memory": [["Marketplace", "marketplace", ["first_mp_request_name", "current_mp_request_name", "current_mp_request_count"], [null, null, 1]]], "smart_contract_memory_size": 228, "smart_contract_new": true, "smart_contract_payload": "\n###VERSION:1\n###END\nclass Marketplace:\n    def __init__(self):\n        self.first_mp_request_name=None\n        self.current_mp_request_name=None\n        self.current_mp_request_count=1\n\n    def get_mp_request_name(self):\n        return \"mp_request_\"+str(self.current_mp_request_count)\n\n    def add_mp_request_name(self,mp_request_name):\n        if self.first_mp_request_name is None or self.first_mp_request_name==\"null\" or self.first_mp_request_name==\"None\":self.first_mp_request_name=mp_request_name\n        self.current_mp_request_name=mp_request_name\n        self.current_mp_request_count+=1\n\n    def get_current_mp_request_name(self):\n        return self.current_mp_request_name\n\n    def get_marketplace_step_list(self,step,user_public_key_hash):\n        marketplace_step_list=[]\n        cursor=self.current_mp_request_name\n        while cursor is not None and 'null' not in cursor:\n            cursor_obj=get_obj_by_name(cursor)\n            if step==1 and cursor_obj.step==step and cursor_obj.buyer_public_key_hash!=user_public_key_hash:marketplace_step_list.append(cursor_obj.get_mp_info(1,user_public_key_hash))\n            elif step==2 and cursor_obj.step==step and cursor_obj.buyer_public_key_hash==user_public_key_hash:marketplace_step_list.append(cursor_obj.get_mp_info(2,user_public_key_hash))\n            elif step==3 and cursor_obj.step==step and cursor_obj.seller_public_key_hash==user_public_key_hash:marketplace_step_list.append(cursor_obj.get_mp_info(3,user_public_key_hash))\n            cursor=cursor_obj.previous_mp_request_name\n        return marketplace_step_list\n\nmarketplace=Marketplace()\nmemory_list.add([marketplace,'marketplace',['first_mp_request_name','current_mp_request_name','current_mp_request_count']])\n123456\n", "smart_contract_previous_transaction": null, "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1718369664.127391, "transaction_hash": "921dee218c8ee125c962b81e1e09f639d7a837869281848a98be68d1d4a940c2"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "abcd1234", "unlocking_public_key_hash": "abcd1234_0", "unlocking_script": "8c3db76d293fcec2c06d30c5b85c17244338692ecbcb34c9bdebab11f7f65e94023119651e161a4c98b8df95568bd562091fcf854698b071ab8963cca102aa085b6c80d3e8649ccaeaf9fe353c9c252961afb6e12a1b3c45ab4ad5da3b42f33f3acdf6aad7ecfe0c7741d18991859095844f7c3a78825d65bd0ef7e232326b08e1b620624b309c54262557a0804204a9377587bd4dc3a73dadceac255753093255a1223f522cf8c4c479c347d373d3d50e67bb01cc59bcb4917baed834bffc74ce0bc01385ef7aa480c8dce10994c6c21ce8277f21269271e30c818cd9c6a6385e527e9fb5bafbef41420185b8932283824f31d05673db67a95bb1c0c448e327 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 0ee93ba03f12c3a9e04b7982b5e4b657654aa74a", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "0ee93ba03f12c3a9e04b7982b5e4b657654aa74a", "smart_contract_flag": true, "smart_contract_gas": 999771.8983, "smart_contract_memory": [["Application", "application", ["version", "url"], ["22", "https://drive.google.com/file/d/14e-xmqB-B59XACSRFNMsJa4yyJdyUG62/view?usp=drive_link"]]], "smart_contract_memory_size": 228, "smart_contract_new": true, "smart_contract_payload": "\n###VERSION:1\n###END\nclass Application:\n    def __init__(self):\n        self.version=\"22\"\n        self.url=\"https://drive.google.com/file/d/14e-xmqB-B59XACSRFNMsJa4yyJdyUG62/view?usp=drive_link\"\n\n    def get_version_data(self):\n        return {\"version\":self.version,\"url\":self.url}\n\n        \napplication=Application()\nmemory_list.add([application,'application',['version','url']])\n123456\n", "smart_contract_previous_transaction": null, "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1718369664.141878, "transaction_hash": "9953379b47de1193f66cbfbb5c6cd43af7622e5e09fd5b3e5cf0c3e53be56686"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "abcd1234", "unlocking_public_key_hash": "abcd1234_0", "unlocking_script": "4a91ff2167c3896c0695efa6f5893a56bf27377707c5906e0c29b13398da3ad0b81966a22f49db344b6b56163454bd7beeecf9370e2e10c0dc632b332580d5cc093fe8c71c277bc6708938a587e085cd64b5f6a8ad4d1d4bba1c0082b1cffa7a41f4a243e6d3909869656fab9fb0912089577801f7f9fa1f4af852bae8e3c943eff6fc0a97a6403b5918182a19f3efd7d34f59746c266c19c7e95de657044a74d07ac1e0bc93969a7b652b896372f549e19e9491aaef94506ff4c6176024c5bdd1fbd40310e52a4ae732c6f48222f155072910be147546bf3b2196541b8359fb05c5fff8d283fc88166aa224a1ecea107b4b66f4567b7ff0f76ef43e3c7754e6 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 41e69d07d38a4d7cca36df456ef099e8efb0512d", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "41e69d07d38a4d7cca36df456ef099e8efb0512d", "smart_contract_flag": true, "smart_contract_gas": 999772.0, "smart_contract_memory": [["MarketplaceRequestCode", "marketplace_request_code", ["code"], ["\n###VERSION:1\n\nclass MarketplaceRequest:\n    def __init__(self):\n        self.account=None\n        self.step=0\n        self.new_user_flag=False\n        self.timestamp=datetime.timestamp(datetime.utcnow())\n        self.timestamp_step1=None\n        self.timestamp_step2=None\n        self.timestamp_step3=None\n        self.timestamp_step4=None\n        self.requested_amount=0\n        self.requested_currency='EUR'\n        self.requested_deposit=0\n        self.requested_nig=0\n        self.requested_nig_step2=None\n        self.requested_nig_step2_flag=False\n        self.timestamp_nig=None\n        self.buyer_public_key_hex=None\n        self.buyer_public_key_hash=None\n        self.buyer_public_key_hash=None\n        self.buyer_reput_trans=0\n        self.buyer_reput_reliability=0\n        self.seller_public_key_hex=\"\"\n        self.seller_public_key_hash=\"\"\n        self.encrypted_account=\"\"\n        self.mp_request_signature=None\n        self.mp_request_id=random.randint(10000000, 99999999)\n        self.previous_mp_request_name=None\n        self.mp_request_name=None\n        self.seller_safety_coef=GET_SELLER_SAFETY_COEF()\n        self.smart_contract_ref=None\n        self.reputation_buyer=0\n        self.reputation_seller=0\n\n    def get_mp_details(self,step):\n        mp_details = [self.timestamp,self.buyer_public_key_hash,self.buyer_public_key_hex,self.requested_amount,self.mp_request_id]\n        if self.requested_nig_step2_flag is True:requested_nig=self.requested_nig_step2\n        else:requested_nig=self.requested_nig\n        if self.step>=1:\n            self.seller_safety_coef=GET_SELLER_SAFETY_COEF()\n            mp_details.extend([requested_nig,self.seller_safety_coef])\n        if self.step>=2:mp_details.extend([self.seller_public_key_hex,self.seller_public_key_hash,self.requested_deposit])\n        if self.step==99:mp_details.append(\"cancellation\")\n        if self.step==66:mp_details.append(\"payment default\")\n        return mp_details\n\n    def get_requested_deposit(self):\n        return self.requested_deposit\n\n    def get_new_user_flag(self):\n        return self.new_user_flag\n\n    def get_reputation(self):\n        if self.reputation_buyer!=0 or self.reputation_seller!=0:return {self.buyer_public_key_hash:self.reputation_buyer,self.seller_public_key_hash:self.reputation_seller}\n        else:return None\n\n    def get_mp_info(self,step,user_public_key_hash):\n        try:step=int(step)\n        except:step=99\n        mp_details=None\n        flag=False\n        readonly_flag=False\n        if self.step!=4 and self.step!=45 and self.step!=66 and self.step!=98 and self.step!=99:\n            if step==1:\n                flag=True\n                if self.buyer_public_key_hash==user_public_key_hash:readonly_flag=True\n            if step==2:\n                if self.buyer_public_key_hash==user_public_key_hash:flag=True\n                if self.step==1:readonly_flag=True\n                if self.step==3:readonly_flag=True\n            if step==3:\n                if self.seller_public_key_hash==user_public_key_hash:flag=True\n                if self.step==2:readonly_flag=True\n            if flag is True:\n                mp_details = {\"timestamp_nig\": self.timestamp,\"requester_public_key_hash\": self.buyer_public_key_hash,\"requester_public_key_hex\": self.buyer_public_key_hex,\"seller_public_key_hash\": self.seller_public_key_hash,\"requested_amount\": self.requested_amount,\"requested_currency\":self.requested_currency,\"requested_nig\": self.requested_nig,\"payment_ref\": self.mp_request_name}\n                mp_details['seller_public_key_hex']=self.seller_public_key_hex\n                mp_details['encrypted_account']=self.encrypted_account\n                mp_details['smart_contract_ref']=self.smart_contract_ref\n                mp_details['readonly_flag']=readonly_flag\n                mp_details['buyer_reput_trans']=self.buyer_reput_trans\n                mp_details['buyer_reput_reliability']=self.buyer_reput_reliability\n                mp_details['step']=self.step\n        return mp_details\n\n    def get_mp_info_archive(self,step):\n        mp_details=None\n        if step==self.step:\n            mp_details = {\"timestamp_nig\": self.timestamp_step4, \"readonly_flag\":False}\n        return mp_details\n\n    def step1(self,mp_request_name,buyer_public_key_hash,buyer_public_key_hex,requested_amount,smart_contract_ref,new_user_flag,buyer_reput_trans,buyer_reput_reliability):\n        if buyer_public_key_hash is not None and 'None' not in buyer_public_key_hash:\n            if self.step==0:\n                self.mp_request_name=mp_request_name\n                self.buyer_public_key_hash=buyer_public_key_hash\n                self.buyer_public_key_hex=buyer_public_key_hex\n                self.requested_amount=requested_amount\n                self.timestamp_nig=datetime.timestamp(datetime.utcnow())\n                self.requested_nig=CONVERT_2_NIG(requested_amount,self.timestamp_nig,self.requested_currency)\n                self.step=1\n                self.smart_contract_ref=smart_contract_ref\n                self.timestamp_step1=datetime.timestamp(datetime.utcnow())\n                if new_user_flag==\"true\" or new_user_flag==\"True\":new_user_flag=True\n                if new_user_flag==\"false\" or new_user_flag==\"False\":\n                    new_user_flag=False\n                    self.requested_deposit=CONVERT_2_NIG(requested_amount,self.timestamp_nig,self.requested_currency)*GET_BUYER_SAFETY_COEF()\n                self.new_user_flag=new_user_flag\n                self.buyer_reput_trans=buyer_reput_trans\n                self.buyer_reput_reliability=buyer_reput_reliability\n            else:raise ValueError('request cannot be confirmed in step 1')\n        else:raise ValueError('Please select a buyer')\n\n    def step2(self,seller_public_key_hash,seller_public_key_hex,encrypted_account,mp_request_signature):\n        if seller_public_key_hash is not None and 'None' not in seller_public_key_hash:\n            if self.step==1:\n                self.seller_public_key_hash=seller_public_key_hash\n                self.seller_public_key_hex=seller_public_key_hex\n                self.timestamp_nig=datetime.timestamp(datetime.utcnow())\n                self.requested_nig_step2=copy.deepcopy(self.requested_nig)\n                self.requested_nig_step2_flag=True\n                self.requested_nig=CONVERT_2_NIG(self.requested_amount,self.timestamp_nig,self.requested_currency)\n                self.encrypted_account=encrypted_account\n                self.mp_request_signature=mp_request_signature\n                self.step=2\n                self.timestamp_step2=datetime.timestamp(datetime.utcnow())\n            else:raise ValueError('request cannot be confirmed in step 2')\n        else:raise ValueError('Please select a seller')\n            \n\n    def step3(self,mp_request_signature):\n        if self.step==2:\n            self.mp_request_signature=mp_request_signature\n            self.step=3\n            self.timestamp_step3=datetime.timestamp(datetime.utcnow())\n        else:raise ValueError('request cannot be confirmed in step 3')\n\n    def step4(self,mp_request_signature):\n        if self.step==3:\n            self.mp_request_signature=mp_request_signature\n            self.step=4\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n            self.reputation_buyer=1\n            self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in step 4')\n\n    def step45(self,mp_request_signature):\n        if self.step==3:\n            self.mp_request_signature=mp_request_signature\n            self.step=45\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n            self.reputation_buyer=-1\n            self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in step 45')\n\n    def check_cancellation(self,mp_request_signature):\n        if self.step<3:\n          self.mp_request_signature=mp_request_signature\n          self.step=99\n          self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n        else:raise ValueError('request cannot be confirmed in cancellation')\n\n    def check_payment_default(self,mp_request_signature):\n        if self.step==3:\n          self.mp_request_signature=mp_request_signature\n          self.step=66\n          self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n          self.reputation_buyer=-1\n          self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in payment default')\n\n    def validate_step(self):\n        signature_decoded = binascii.unhexlify(self.mp_request_signature.encode(\"utf-8\"))\n        if self.step==2 or self.step==4 or self.step==45 or self.step==66:\n            public_key_bytes = self.seller_public_key_hex.encode(\"utf-8\")\n        elif self.step==3 or self.step==99:\n            public_key_bytes = self.buyer_public_key_hex.encode(\"utf-8\")\n        else:\n            raise ValueError(f'request not in predefined step:{self.step}')\n      \n        public_key_object = RSA.import_key(binascii.unhexlify(public_key_bytes))\n        transaction_bytes = json.dumps(self.get_mp_details(self.step), indent=2).encode('utf-8')\n        transaction_hash = SHA256.new(transaction_bytes)\n        pkcs1_15.new(public_key_object).verify(transaction_hash, signature_decoded)\n\n    def check_expiration(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        return self.check_expiration_raw(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,False)\n\n    def validate_expiration(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        return self.check_expiration_raw(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,True)\n\n    def check_expiration_raw(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,error_flag):\n        expiration_flag=False\n        check_now=datetime.timestamp(datetime.utcnow())\n        if self.step==1 and check_now-self.timestamp_step1>MARKETPLACE_STEP1_EXPIRATION:expiration_flag=True\n        if self.step==2 and check_now-self.timestamp_step2>MARKETPLACE_STEP2_EXPIRATION:\n            self.reputation_buyer=-1\n            expiration_flag=True\n        if self.step==3 and check_now-self.timestamp_step3>MARKETPLACE_STEP3_EXPIRATION:\n            self.reputation_seller=-1\n            expiration_flag=True\n        if expiration_flag is True:\n            self.step=98\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n        else:\n            if error_flag is True:ValueError('smart_contract is not expired')\n        return expiration_flag\n\t\t\n    def get_mp_info_and_expiration(self,step,user_public_key_hash,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        mp_info=self.get_mp_info(step,user_public_key_hash)\n        expiration=self.check_expiration(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION)\n        return mp_info,expiration,self.requested_amount,self.step\n\n    def cancel(self,user_public_key_hash,mp_request_signature):\n        if self.step<3 and self.buyer_public_key_hash==user_public_key_hash:\n            CANCEL_SC(self.smart_contract_ref,self.step,mp_request_signature)\n        else:\n            raise ValueError(f'Cancellation not possible in step:{self.step} for user:{user_public_key_hash}')\n\n    def payment_default(self,user_public_key_hash,mp_request_signature):\n        if self.step==3 and self.seller_public_key_hash==user_public_key_hash:\n            PAYMENT_DEFAULT_SC(self.smart_contract_ref,self.step,mp_request_signature)\n        else:\n            raise ValueError(f'payment default not possible in step:{self.step} for user:{user_public_key_hash}')\n\n"]]], "smart_contract_memory_size": 228, "smart_contract_new": true, "smart_contract_payload": "\n###VERSION:1\n###END\nclass MarketplaceRequestCode:\n    def __init__(self):\n        self.code='''\n###VERSION:1\n###END\nclass MarketplaceRequest:\n    def __init__(self):\n        self.account=None\n        self.step=0\n        self.new_user_flag=False\n        self.timestamp=datetime.timestamp(datetime.utcnow())\n        self.timestamp_step1=None\n        self.timestamp_step2=None\n        self.timestamp_step3=None\n        self.timestamp_step4=None\n        self.requested_amount=0\n        self.requested_currency='EUR'\n        self.requested_deposit=0\n        self.requested_nig=0\n        self.requested_nig_step2=None\n        self.requested_nig_step2_flag=False\n        self.timestamp_nig=None\n        self.buyer_public_key_hex=None\n        self.buyer_public_key_hash=None\n        self.buyer_public_key_hash=None\n        self.buyer_reput_trans=0\n        self.buyer_reput_reliability=0\n        self.seller_public_key_hex=\"\"\n        self.seller_public_key_hash=\"\"\n        self.encrypted_account=\"\"\n        self.mp_request_signature=None\n        self.mp_request_id=random.randint(10000000, 99999999)\n        self.previous_mp_request_name=None\n        self.mp_request_name=None\n        self.seller_safety_coef=GET_SELLER_SAFETY_COEF()\n        self.smart_contract_ref=None\n        self.reputation_buyer=0\n        self.reputation_seller=0\n\n    def get_mp_details(self,step):\n        mp_details = [self.timestamp,self.buyer_public_key_hash,self.buyer_public_key_hex,self.requested_amount,self.mp_request_id]\n        if self.requested_nig_step2_flag is True:requested_nig=self.requested_nig_step2\n        else:requested_nig=self.requested_nig\n        if self.step>=1:\n            self.seller_safety_coef=GET_SELLER_SAFETY_COEF()\n            mp_details.extend([requested_nig,self.seller_safety_coef])\n        if self.step>=2:mp_details.extend([self.seller_public_key_hex,self.seller_public_key_hash,self.requested_deposit])\n        if self.step==99:mp_details.append(\"cancellation\")\n        if self.step==66:mp_details.append(\"payment default\")\n        return mp_details\n\n    def get_requested_deposit(self):\n        return self.requested_deposit\n\n    def get_new_user_flag(self):\n        return self.new_user_flag\n\n    def get_reputation(self):\n        if self.reputation_buyer!=0 or self.reputation_seller!=0:return {self.buyer_public_key_hash:self.reputation_buyer,self.seller_public_key_hash:self.reputation_seller}\n        else:return None\n\n    def get_mp_info(self,step,user_public_key_hash):\n        try:step=int(step)\n        except:step=99\n        mp_details=None\n        flag=False\n        readonly_flag=False\n        if self.step!=4 and self.step!=45 and self.step!=66 and self.step!=98 and self.step!=99:\n            if step==1:\n                flag=True\n                if self.buyer_public_key_hash==user_public_key_hash:readonly_flag=True\n            if step==2:\n                if self.buyer_public_key_hash==user_public_key_hash:flag=True\n                if self.step==1:readonly_flag=True\n                if self.step==3:readonly_flag=True\n            if step==3:\n                if self.seller_public_key_hash==user_public_key_hash:flag=True\n                if self.step==2:readonly_flag=True\n            if flag is True:\n                mp_details = {\"timestamp_nig\": self.timestamp,\"requester_public_key_hash\": self.buyer_public_key_hash,\"requester_public_key_hex\": self.buyer_public_key_hex,\"seller_public_key_hash\": self.seller_public_key_hash,\"requested_amount\": self.requested_amount,\"requested_currency\":self.requested_currency,\"requested_nig\": self.requested_nig,\"payment_ref\": self.mp_request_name}\n                mp_details['seller_public_key_hex']=self.seller_public_key_hex\n                mp_details['encrypted_account']=self.encrypted_account\n                mp_details['smart_contract_ref']=self.smart_contract_ref\n                mp_details['readonly_flag']=readonly_flag\n                mp_details['buyer_reput_trans']=self.buyer_reput_trans\n                mp_details['buyer_reput_reliability']=self.buyer_reput_reliability\n                mp_details['step']=self.step\n        return mp_details\n\n    def get_mp_info_archive(self,step):\n        mp_details=None\n        if step==self.step:\n            mp_details = {\"timestamp_nig\": self.timestamp_step4, \"readonly_flag\":False}\n        return mp_details\n\n    def step1(self,mp_request_name,buyer_public_key_hash,buyer_public_key_hex,requested_amount,smart_contract_ref,new_user_flag,buyer_reput_trans,buyer_reput_reliability):\n        if buyer_public_key_hash is not None and 'None' not in buyer_public_key_hash:\n            if self.step==0:\n                self.mp_request_name=mp_request_name\n                self.buyer_public_key_hash=buyer_public_key_hash\n                self.buyer_public_key_hex=buyer_public_key_hex\n                self.requested_amount=requested_amount\n                self.timestamp_nig=datetime.timestamp(datetime.utcnow())\n                self.requested_nig=CONVERT_2_NIG(requested_amount,self.timestamp_nig,self.requested_currency)\n                self.step=1\n                self.smart_contract_ref=smart_contract_ref\n                self.timestamp_step1=datetime.timestamp(datetime.utcnow())\n                if new_user_flag==\"true\" or new_user_flag==\"True\":new_user_flag=True\n                if new_user_flag==\"false\" or new_user_flag==\"False\":\n                    new_user_flag=False\n                    self.requested_deposit=CONVERT_2_NIG(requested_amount,self.timestamp_nig,self.requested_currency)*GET_BUYER_SAFETY_COEF()\n                self.new_user_flag=new_user_flag\n                self.buyer_reput_trans=buyer_reput_trans\n                self.buyer_reput_reliability=buyer_reput_reliability\n            else:raise ValueError('request cannot be confirmed in step 1')\n        else:raise ValueError('Please select a buyer')\n\n    def step2(self,seller_public_key_hash,seller_public_key_hex,encrypted_account,mp_request_signature):\n        if seller_public_key_hash is not None and 'None' not in seller_public_key_hash:\n            if self.step==1:\n                self.seller_public_key_hash=seller_public_key_hash\n                self.seller_public_key_hex=seller_public_key_hex\n                self.timestamp_nig=datetime.timestamp(datetime.utcnow())\n                self.requested_nig_step2=copy.deepcopy(self.requested_nig)\n                self.requested_nig_step2_flag=True\n                self.requested_nig=CONVERT_2_NIG(self.requested_amount,self.timestamp_nig,self.requested_currency)\n                self.encrypted_account=encrypted_account\n                self.mp_request_signature=mp_request_signature\n                self.step=2\n                self.timestamp_step2=datetime.timestamp(datetime.utcnow())\n            else:raise ValueError('request cannot be confirmed in step 2')\n        else:raise ValueError('Please select a seller')\n            \n\n    def step3(self,mp_request_signature):\n        if self.step==2:\n            self.mp_request_signature=mp_request_signature\n            self.step=3\n            self.timestamp_step3=datetime.timestamp(datetime.utcnow())\n        else:raise ValueError('request cannot be confirmed in step 3')\n\n    def step4(self,mp_request_signature):\n        if self.step==3:\n            self.mp_request_signature=mp_request_signature\n            self.step=4\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n            self.reputation_buyer=1\n            self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in step 4')\n\n    def step45(self,mp_request_signature):\n        if self.step==3:\n            self.mp_request_signature=mp_request_signature\n            self.step=45\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n            self.reputation_buyer=-1\n            self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in step 45')\n\n    def check_cancellation(self,mp_request_signature):\n        if self.step<3:\n          self.mp_request_signature=mp_request_signature\n          self.step=99\n          self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n        else:raise ValueError('request cannot be confirmed in cancellation')\n\n    def check_payment_default(self,mp_request_signature):\n        if self.step==3:\n          self.mp_request_signature=mp_request_signature\n          self.step=66\n          self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n          self.reputation_buyer=-1\n          self.reputation_seller=1\n        else:raise ValueError('request cannot be confirmed in payment default')\n\n    def validate_step(self):\n        signature_decoded = binascii.unhexlify(self.mp_request_signature.encode(\"utf-8\"))\n        if self.step==2 or self.step==4 or self.step==45 or self.step==66:\n            public_key_bytes = self.seller_public_key_hex.encode(\"utf-8\")\n        elif self.step==3 or self.step==99:\n            public_key_bytes = self.buyer_public_key_hex.encode(\"utf-8\")\n        else:\n            raise ValueError(f'request not in predefined step:{self.step}')\n      \n        public_key_object = RSA.import_key(binascii.unhexlify(public_key_bytes))\n        transaction_bytes = json.dumps(self.get_mp_details(self.step), indent=2).encode('utf-8')\n        transaction_hash = SHA256.new(transaction_bytes)\n        pkcs1_15.new(public_key_object).verify(transaction_hash, signature_decoded)\n\n    def check_expiration(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        return self.check_expiration_raw(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,False)\n\n    def validate_expiration(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        return self.check_expiration_raw(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,True)\n\n    def check_expiration_raw(self,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION,error_flag):\n        expiration_flag=False\n        check_now=datetime.timestamp(datetime.utcnow())\n        if self.step==1 and check_now-self.timestamp_step1>MARKETPLACE_STEP1_EXPIRATION:expiration_flag=True\n        if self.step==2 and check_now-self.timestamp_step2>MARKETPLACE_STEP2_EXPIRATION:\n            self.reputation_buyer=-1\n            expiration_flag=True\n        if self.step==3 and check_now-self.timestamp_step3>MARKETPLACE_STEP3_EXPIRATION:\n            self.reputation_seller=-1\n            expiration_flag=True\n        if expiration_flag is True:\n            self.step=98\n            self.timestamp_step4=datetime.timestamp(datetime.utcnow())\n        else:\n            if error_flag is True:ValueError('smart_contract is not expired')\n        return expiration_flag\n\t\t\n    def get_mp_info_and_expiration(self,step,user_public_key_hash,MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION):\n        mp_info=self.get_mp_info(step,user_public_key_hash)\n        expiration=self.check_expiration(MARKETPLACE_STEP1_EXPIRATION,MARKETPLACE_STEP2_EXPIRATION,MARKETPLACE_STEP3_EXPIRATION)\n        return mp_info,expiration,self.requested_amount,self.step\n\n    def cancel(self,user_public_key_hash,mp_request_signature):\n        if self.step<3 and self.buyer_public_key_hash==user_public_key_hash:\n            CANCEL_SC(self.smart_contract_ref,self.step,mp_request_signature)\n        else:\n            raise ValueError(f'Cancellation not possible in step:{self.step} for user:{user_public_key_hash}')\n\n    def payment_default(self,user_public_key_hash,mp_request_signature):\n        if self.step==3 and self.seller_public_key_hash==user_public_key_hash:\n            PAYMENT_DEFAULT_SC(self.smart_contract_ref,self.step,mp_request_signature)\n        else:\n            raise ValueError(f'payment default not possible in step:{self.step} for user:{user_public_key_hash}')\n\n'''\nmarketplace_request_code=MarketplaceRequestCode()\nmemory_list.add([marketplace_request_code,'marketplace_request_code',['code']])\n123456\n", "smart_contract_previous_transaction": null, "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1718369664.156285, "transaction_hash": "f0c1891b95a8db15298b14c39839d5c96088347149c78aa746e10f15b963c9ec"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "abcd1234", "unlocking_public_key_hash": "abcd1234_0", "unlocking_script": "b82d6bd769f6b0b96c36ede4a2f0cca56a724ea51083b42be84dd706c026fb48e7fc9b8fcf9c7f157a786a08041a43786d3ebb45be737699b84ca922db381fb230cd429c1c294cdb9a0ff0f1a3afd0fdfa6fe1ba19f484b4a324c02b98f072b2695d646b3c5141b09261f5186cabde72ee8ecc51b33775efc30512f57339fbf8cd22642f6c4fbcfe3cbb1e7c124c43b3e647ac92660baae990ff187d8c8608607277f6fc092650bc49a40aead219f293593216eec8f10129919b977c7b1303b471cee3aebf0a476f8c9b8af7625d0cdb695246332d8bc6ab779475de474af2afde1172a0c6d001157cf2288f44884198e682d515714da36d88f9a1092ae184a1 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 9ee93ba03f12c3a9e04b7982b5e4b657654aa74a", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "9ee93ba03f12c3a9e04b7982b5e4b657654aa74a", "smart_contract_flag": true, "smart_contract_gas": 999771.9023, "smart_contract_memory": [["Contest", "contest", ["participant_list", "ranking"], [[], {"ranking": []}]]], "smart_contract_memory_size": 228, "smart_contract_new": true, "smart_contract_payload": "\n###VERSION:1\n###END\nclass Contest:\n    def __init__(self):\n        self.participant_list=[]\n        self.ranking={'ranking': []}\n\n    def add_participant(self,public_key_hash,smart_contract_account):\n        if self.check_participant(public_key_hash) is False:self.participant_list.append([public_key_hash,smart_contract_account])\n\n    def check_participant(self,public_key_hash):\n        if public_key_hash in [y[0] for y in self.participant_list]:return True\n        else:return False\n\n    def remove_participant(self,public_key_hash):\n        for item in [y for y in self.participant_list if y[0]==public_key_hash]:\n            self.participant_list.remove(smart_contract_account)\n\n    def get_smart_contract(self,public_key_hash):\n        result=None\n        for item in self.participant_list:\n            if public_key_hash==item[0]:\n                result=item[1]\n                break\n        return result\n\n    def get_ranking(self):\n        raw_ranking=[]\n        for item in self.participant_list:\n            try:\n                payload='''\nmemory_obj_2_load=['participant']\nparticipant.get_score_data()\n'''\n                result=LOAD_SC(item[1],payload)\n                if result is not None:raw_ranking.append(result)\n            except:pass\n        counter=1\n        for item in sorted(raw_ranking, key=lambda d: d[1],reverse = True):\n            item.insert(0,counter)\n            self.ranking['ranking'].append(item)\n            counter+=1\n        return self.ranking\n        \n        \ncontest=Contest()\nmemory_list.add([contest,'contest',['participant_list','ranking']])\n123456\n", "smart_contract_previous_transaction": null, "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1718369664.176499, "transaction_hash": "8f7c66a73adf66dc352aa4d99318a6d0fe23790869a607cbe685d8829d94b957"}]}, {"transactions": [{"inputs": [{"network": "nig", "output_index": 0, "transaction_hash": "abcd1234", "unlocking_public_key_hash": "abcd1234_0", "unlocking_script": "354a4e8d249c7d4a0d42d07f9edebb29aec183b96aca6da7ee81239dcbb2cfdf71b8eed5974bb9f1a3f51f3c4b131e433336583dc984f15f80c8538e26b6ac66109bbb5b60205f84c83cffb2039c9ef381a57c0b0da0f5085423885cabc36803197baa1922bc3f5d75e755b41f54c5fc2d7d4a12b9c686fbb45a7a989b6e37a49d1aafa69f3e1bf6b7e87accbbabb704ddf057c7c8d7fe2dca3bf5a1c2c882f83e7ddf6e3b0369d3030c4b3e6dfa71d77c7bb77b296378f92ccca237f93917cd8da3d65be23fe8ab23c13359ec1268ca5e7e7111b879d0d6ddfc0783c68120d7e8aeb9faaff49ed10a498df898608b39106714bdca3acd56effe3e7a92b1025e 30820122300d06092a864886f70d01010105000382010f003082010a0282010100e3d338c7a46785514c37293971ed3a5757fc5e9e3042bc9cba75504bde5eee57c9cc788506042425662a45d320ca23e5aaeb989e1719f064e6fe228d9f0a316a06acd708a5536bb5cc1e0b8307ee9848e00729d5a171f00e2a435e719be1da99d7039d8c331bf869270a537b104b228a91061ada0be7918e8d88c8adadb0be2823026b751db63d0b101d7146f5b50a463161877aa3130e69be35d5f4eb71073a40bd1766c4440709eae3c9f0bfbeed6fa28358334721d497b9f3d6c31b9a258fe1d89fe3ebf5bffafc36e9fc8cbd82a57b9bec0e4cea390df37a87d60d585e808559abd83d81a2f2737e235ce2fc0cdee68770d917bf093d0ad5645610b4f4230203010001"}], "outputs": [{"account": null, "amount": 0.0, "fee_interface": 0, "fee_miner": 0, "fee_node": 0, "interface_public_key_hash": null, "locking_script": "OP_DUP OP_HASH160 31f2ac8088005412c7b031a6e342b17a65a48d01 OP_EQUAL_VERIFY OP_CHECKSIG OP_SC 7c2043277fc30413cdfa5224d228c449ef2586c9", "marketplace_transaction_flag": false, "network": "nig", "node_public_key_hash": "183e3d96b5b818841bd95ce36635afcc423b5639", "smart_contract_account": "7c2043277fc30413cdfa5224d228c449ef2586c9", "smart_contract_flag": true, "smart_contract_gas": 999771.9001, "smart_contract_memory": [["ReputationCode", "reputation_code", ["code"], ["\n###VERSION:1\n\nclass Reputation:\n    def __init__(self):\n        self.nb_transaction=0\n        self.nb_pos=0\n        self.nb_neg=0\n\n    def get_reputation(self):\n        if self.nb_transaction==0:reliability=0\n        else:reliability=max(0,round(((float(self.nb_pos)-float(self.nb_neg))/float(self.nb_transaction))*100,2))\n        return [self.nb_transaction,reliability]\nreputation=Reputation()\nmemory_list.add([reputation,'reputation',['nb_transaction','nb_pos','nb_neg']])\n"]]], "smart_contract_memory_size": 228, "smart_contract_new": true, "smart_contract_payload": "\n###VERSION:1\n###END\nclass ReputationCode:\n    def __init__(self):\n        self.code='''\n###VERSION:1\n###END\nclass Reputation:\n    def __init__(self):\n        self.nb_transaction=0\n        self.nb_pos=0\n        self.nb_neg=0\n\n    def get_reputation(self):\n        if self.nb_transaction==0:reliability=0\n        else:reliability=max(0,round(((float(self.nb_pos)-float(self.nb_neg))/float(self.nb_transaction))*100,2))\n        return [self.nb_transaction,reliability]\nreputation=Reputation()\nmemory_list.add([reputation,'reputation',['nb_transaction','nb_pos','nb_neg']])\n'''\nreputation_code=ReputationCode()\nmemory_list.add([reputation_code,'reputation_code',['code']])\n123456\n", "smart_contract_previous_transaction": null, "smart_contract_result": 123456, "smart_contract_sender": "31f2ac8088005412c7b031a6e342b17a65a48d01", "smart_contract_transaction_flag": false, "smart_contract_type": "source"}], "timestamp": 1718369664.197205, "transaction_hash": "36b56ef5c4471315356d3fc32bbbe14e18e669f89868b7061d3c3fa2f5e561dc"}]}]