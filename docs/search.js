window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "node", "modulename": "node", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "node.main", "modulename": "node.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "node.main.app", "modulename": "node.main", "qualname": "app", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Flask &#x27;node.main&#x27;&gt;"}, {"fullname": "node.main.albert_owner", "modulename": "node.main", "qualname": "albert_owner", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;common.owner.Owner object&gt;"}, {"fullname": "node.main.bertrand_owner", "modulename": "node.main", "qualname": "bertrand_owner", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;common.owner.Owner object&gt;"}, {"fullname": "node.main.camille_owner", "modulename": "node.main", "qualname": "camille_owner", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;common.owner.Owner object&gt;"}, {"fullname": "node.main.marketplace_owner", "modulename": "node.main", "qualname": "marketplace_owner", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;common.owner.Owner object&gt;"}, {"fullname": "node.main.daniel_owner", "modulename": "node.main", "qualname": "daniel_owner", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;common.owner.Owner object&gt;"}, {"fullname": "node.main.albert_wallet", "modulename": "node.main", "qualname": "albert_wallet", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;wallet.wallet.Wallet object&gt;"}, {"fullname": "node.main.bertrand_wallet", "modulename": "node.main", "qualname": "bertrand_wallet", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;wallet.wallet.Wallet object&gt;"}, {"fullname": "node.main.camille_wallet", "modulename": "node.main", "qualname": "camille_wallet", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;wallet.wallet.Wallet object&gt;"}, {"fullname": "node.main.marketplace_wallet", "modulename": "node.main", "qualname": "marketplace_wallet", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;wallet.wallet.Wallet object&gt;"}, {"fullname": "node.main.daniel_wallet", "modulename": "node.main", "qualname": "daniel_wallet", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;wallet.wallet.Wallet object&gt;"}, {"fullname": "node.main.mempool", "modulename": "node.main", "qualname": "mempool", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;common.io_mem_pool.MemPool object&gt;"}, {"fullname": "node.main.blockchain_memory", "modulename": "node.main", "qualname": "blockchain_memory", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;common.io_blockchain.BlockchainMemory object&gt;"}, {"fullname": "node.main.my_node", "modulename": "node.main", "qualname": "my_node", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;common.node.Node object&gt;"}, {"fullname": "node.main.network", "modulename": "node.main", "qualname": "network", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;common.network.Network object&gt;"}, {"fullname": "node.main.PoW_memory", "modulename": "node.main", "qualname": "PoW_memory", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;node.new_block_creation.new_block_creation.ProofOfWork object&gt;"}, {"fullname": "node.main.PoH_memory", "modulename": "node.main", "qualname": "PoH_memory", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;common.proof_of_history.ProofOfHistory object&gt;"}, {"fullname": "node.main.check_for_maintenance", "modulename": "node.main", "qualname": "check_for_maintenance", "kind": "function", "doc": "<p>decorator to manage the maintenance mode trigger by function maintenance_on() and maintenance_off().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.main", "modulename": "node.main", "qualname": "main", "kind": "function", "doc": "<p>initialize the node ready to start with function start()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.start", "modulename": "node.main", "qualname": "start", "kind": "function", "doc": "<p>start the node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.main_request", "modulename": "node.main", "qualname": "main_request", "kind": "function", "doc": "<p>default routing without action.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.validate_transaction", "modulename": "node.main", "qualname": "validate_transaction", "kind": "function", "doc": "<p>receive a transaction by non leader node and routes it to leader node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.transactions_to_leader_node", "modulename": "node.main", "qualname": "transactions_to_leader_node", "kind": "function", "doc": "<p>validate and save in a temporay master state called TempBlockPoH a transaction received by leader node only.\nFYI, the transactions are stored in the blockchain and final master state during block receiving \nby function validate_block or block_saving_leader_node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.TransactionMultiProcessing", "modulename": "node.main", "qualname": "TransactionMultiProcessing", "kind": "class", "doc": "<p>Class to process several transactions in parallel triggered by function transactions_to_leader_node.</p>\n"}, {"fullname": "node.main.TransactionMultiProcessing.__init__", "modulename": "node.main", "qualname": "TransactionMultiProcessing.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "node.main.TransactionMultiProcessing.e", "modulename": "node.main", "qualname": "TransactionMultiProcessing.e", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.main.TransactionMultiProcessing.launch", "modulename": "node.main", "qualname": "TransactionMultiProcessing.launch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transaction_data</span>, </span><span class=\"param\"><span class=\"n\">new_transaction_flag</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.TransactionMultiProcessing.start", "modulename": "node.main", "qualname": "TransactionMultiProcessing.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span>, </span><span class=\"param\"><span class=\"n\">transaction_data</span>, </span><span class=\"param\"><span class=\"n\">new_transaction_flag</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.TransactionMultiProcessing.stop", "modulename": "node.main", "qualname": "TransactionMultiProcessing.stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.Process_transaction", "modulename": "node.main", "qualname": "Process_transaction", "kind": "function", "doc": "<p>sub function of Class TransactionMultiProcessing \nto process in parallel the transactions received by the leader node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.leader_node_advance_purge_backlog", "modulename": "node.main", "qualname": "leader_node_advance_purge_backlog", "kind": "function", "doc": "<p>purge the potential backlog of transaction during leader note rotation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.transactions_to_leader_node_advance", "modulename": "node.main", "qualname": "transactions_to_leader_node_advance", "kind": "function", "doc": "<p>save a transaction by leader node waiting to be processed before being leader.\n(this function is not used).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.save_transactions_to_leader_node_advance", "modulename": "node.main", "qualname": "save_transactions_to_leader_node_advance", "kind": "function", "doc": "<p>sub function of transactions_to_leader_node_advance().\n(this function is not used).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">transaction</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.block_saving_leader_node", "modulename": "node.main", "qualname": "block_saving_leader_node", "kind": "function", "doc": "<p>validate and save a received block in the blockchain and master state by a node which is leader.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.validate_block", "modulename": "node.main", "qualname": "validate_block", "kind": "function", "doc": "<p>validate and save a received block in the blockchain and master state by a node which is NOT leader.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.BlockMultiProcessing", "modulename": "node.main", "qualname": "BlockMultiProcessing", "kind": "class", "doc": "<p>Class to process several blocks in parallel triggered by function validate_block.</p>\n"}, {"fullname": "node.main.BlockMultiProcessing.__init__", "modulename": "node.main", "qualname": "BlockMultiProcessing.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "node.main.BlockMultiProcessing.e", "modulename": "node.main", "qualname": "BlockMultiProcessing.e", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.main.BlockMultiProcessing.launch", "modulename": "node.main", "qualname": "BlockMultiProcessing.launch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">block_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.BlockMultiProcessing.start", "modulename": "node.main", "qualname": "BlockMultiProcessing.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span>, </span><span class=\"param\"><span class=\"n\">block_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.BlockMultiProcessing.stop", "modulename": "node.main", "qualname": "BlockMultiProcessing.stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.Process_block", "modulename": "node.main", "qualname": "Process_block", "kind": "function", "doc": "<p>sub function of Class BlockMultiProcessing \nto process in parallel the blocks received by a node which is not leader.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_blocks", "modulename": "node.main", "qualname": "get_blocks", "kind": "function", "doc": "<p>get the content of the blockchain.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_leader_node_schedule", "modulename": "node.main", "qualname": "get_leader_node_schedule", "kind": "function", "doc": "<p>get the leader node schedule (rotation of leader node).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_leader_node_schedule_next", "modulename": "node.main", "qualname": "get_leader_node_schedule_next", "kind": "function", "doc": "<p>rotate the leader node schedule (rotation of leader node) to the next leader node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.maintenance_on", "modulename": "node.main", "qualname": "maintenance_on", "kind": "function", "doc": "<p>activate the maintenance mode of the node only.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.maintenance_off", "modulename": "node.main", "qualname": "maintenance_off", "kind": "function", "doc": "<p>deactivate the maintenance mode of the node only.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.network_maintenance_on", "modulename": "node.main", "qualname": "network_maintenance_on", "kind": "function", "doc": "<p>activate the maintenance mode of all the network of nodes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.network_maintenance_off", "modulename": "node.main", "qualname": "network_maintenance_off", "kind": "function", "doc": "<p>deactivate the maintenance mode of all the network of nodes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.network_maintenance", "modulename": "node.main", "qualname": "network_maintenance", "kind": "function", "doc": "<p>sub function of network_maintenance_on() and network_maintenance_off().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_user_utxos", "modulename": "node.main", "qualname": "get_user_utxos", "kind": "function", "doc": "<p>get all the available utxo of an user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_user_utxo_balance", "modulename": "node.main", "qualname": "get_user_utxo_balance", "kind": "function", "doc": "<p>get the balance and utxo of an user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_utxo", "modulename": "node.main", "qualname": "get_utxo", "kind": "function", "doc": "<p>retrieve all the available utxo of a given account.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">public_key_hash</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_smart_contract_api2", "modulename": "node.main", "qualname": "get_smart_contract_api2", "kind": "function", "doc": "<p>get the content of a smart contract from a smart_contract_transaction_hash.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">account</span>, </span><span class=\"param\"><span class=\"n\">smart_contract_transaction_hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_smart_contract_api", "modulename": "node.main", "qualname": "get_smart_contract_api", "kind": "function", "doc": "<p>get the content of a smart contract.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">account</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_smart_contract_api_leader_node", "modulename": "node.main", "qualname": "get_smart_contract_api_leader_node", "kind": "function", "doc": "<p>get the content of a smart contract directly from master state during transaction validation\nwhile it's not yet written on the blockchain. For leader node only.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">account</span>, </span><span class=\"param\"><span class=\"n\">smart_contract_transaction_hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_leader_node_smart_contract_api", "modulename": "node.main", "qualname": "get_leader_node_smart_contract_api", "kind": "function", "doc": "<p>get the content of a smart contract from a smart_contract_transaction_hash \ndirectly from master state during transaction validation\nwhile it's not yet written on the blockchain. For leader node only.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">account</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_user_creation", "modulename": "node.main", "qualname": "get_user_creation", "kind": "function", "doc": "<p>create private key, public key hash and public key hex of an user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_transaction", "modulename": "node.main", "qualname": "get_transaction", "kind": "function", "doc": "<p>get the content of a transaction by its transaction_hash.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">transaction_hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.known_node_request", "modulename": "node.main", "qualname": "known_node_request", "kind": "function", "doc": "<p>get the list of known nodes of the node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.new_node_advertisement", "modulename": "node.main", "qualname": "new_node_advertisement", "kind": "function", "doc": "<p>save a new node in the list of known nodes of the node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.new_leader_node_schedule_advertisement", "modulename": "node.main", "qualname": "new_leader_node_schedule_advertisement", "kind": "function", "doc": "<p>save a new leader node schedule (leader node rotation).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.restart", "modulename": "node.main", "qualname": "restart", "kind": "function", "doc": "<p>restart the network of nodes by completely reseting \nthe storage of each node known by the leader node.\nIt can be only triggered by the leader node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.restart_request", "modulename": "node.main", "qualname": "restart_request", "kind": "function", "doc": "<p>manage a request to restart the node triggered by the leader node (cf. function restart()).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.restart_join", "modulename": "node.main", "qualname": "restart_join", "kind": "function", "doc": "<p>manage a request to join the network triggered by the leader node (cf. function restart()).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.PoH_reset", "modulename": "node.main", "qualname": "PoH_reset", "kind": "function", "doc": "<p>reset the Proof Of History (PoH).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.sell_followup_step4_pin", "modulename": "node.main", "qualname": "sell_followup_step4_pin", "kind": "function", "doc": "<p>check if the pin code provide in step 4 in the marketplace is valid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user</span>, </span><span class=\"param\"><span class=\"n\">payment_ref</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_marketplace_step", "modulename": "node.main", "qualname": "get_marketplace_step", "kind": "function", "doc": "<p>get all the marketplace request for a given step below an amount if provided.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">marketplace_step</span>, </span><span class=\"param\"><span class=\"n\">user_public_key_hash</span>, </span><span class=\"param\"><span class=\"n\">amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_check_notification", "modulename": "node.main", "qualname": "get_check_notification", "kind": "function", "doc": "<p>check if notifications are needed in the mobile app (interface) for a given account.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user_public_key_hash</span>, </span><span class=\"param\"><span class=\"n\">notification_timestamp_dict_raw</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_nig_value_projection", "modulename": "node.main", "qualname": "get_nig_value_projection", "kind": "function", "doc": "<p>calculate the NIG value in 6 months, 1 year, 2 years, 3 years and 5 years.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nig_amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_nig_value_projection_year", "modulename": "node.main", "qualname": "get_nig_value_projection_year", "kind": "function", "doc": "<p>calculate the NIG value in 1 month, 2 months, 3 months, 6 months, 9 months and 1 year.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nig_amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_nig_value_projection_future", "modulename": "node.main", "qualname": "get_nig_value_projection_future", "kind": "function", "doc": "<p>calculate the NIG value in 1 year, 2 years, 3 years, 5 years, 7 years and 10 years.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nig_amount</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_nig_value_projection_raw", "modulename": "node.main", "qualname": "get_nig_value_projection_raw", "kind": "function", "doc": "<p>sub function used to calculates the NIG value in function get_nig_value_projection,\nfunction get_nig_value_projection_year and function get_nig_value_projection_future.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nig_amount</span>, </span><span class=\"param\"><span class=\"n\">range_list1</span>, </span><span class=\"param\"><span class=\"n\">range_list2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_nig_rate", "modulename": "node.main", "qualname": "get_nig_rate", "kind": "function", "doc": "<p>get the current NIG value in \u20ac for 1 NIG.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.calculate_nig_rate", "modulename": "node.main", "qualname": "calculate_nig_rate", "kind": "function", "doc": "<p>calculate NIG value in \u20ac for 1 NIG based on a given timestamp.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.transaction_creation", "modulename": "node.main", "qualname": "transaction_creation", "kind": "function", "doc": "<p>tutorial showing how to create a transaction on the blockchain.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.smart_contract_owner", "modulename": "node.main", "qualname": "smart_contract_owner", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;common.owner.Owner object&gt;"}, {"fullname": "node.main.smart_contract_wallet", "modulename": "node.main", "qualname": "smart_contract_wallet", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;wallet.wallet.Wallet object&gt;"}, {"fullname": "node.main.get_create_smart_contract_account", "modulename": "node.main", "qualname": "get_create_smart_contract_account", "kind": "function", "doc": "<p>create a smart contract account (public key hash). Use by Mobile App (interface).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_smart_contract_creation", "modulename": "node.main", "qualname": "get_smart_contract_creation", "kind": "function", "doc": "<p>create and validate a new smart contract based on its provided payload. Use by Mobile App (interface).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_smart_contract", "modulename": "node.main", "qualname": "get_smart_contract", "kind": "function", "doc": "<p>add and validate a new provided payload on an existing smart contract.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_blockchain_root", "modulename": "node.main", "qualname": "get_blockchain_root", "kind": "function", "doc": "<p>get all the available chains of blocks waiting to be validated by the nodes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.MarketplaceRequestArchivingProcessing", "modulename": "node.main", "qualname": "MarketplaceRequestArchivingProcessing", "kind": "class", "doc": "<p>Class to archive expired marketplace requests.</p>\n"}, {"fullname": "node.main.MarketplaceRequestArchivingProcessing.__init__", "modulename": "node.main", "qualname": "MarketplaceRequestArchivingProcessing.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "node.main.MarketplaceRequestArchivingProcessing.e", "modulename": "node.main", "qualname": "MarketplaceRequestArchivingProcessing.e", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.main.MarketplaceRequestArchivingProcessing.launch", "modulename": "node.main", "qualname": "MarketplaceRequestArchivingProcessing.launch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">request_type</span>,</span><span class=\"param\">\t<span class=\"n\">marketplace_account</span>,</span><span class=\"param\">\t<span class=\"n\">marketplace_step</span>,</span><span class=\"param\">\t<span class=\"n\">mp_request_signature</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.MarketplaceRequestArchivingProcessing.start", "modulename": "node.main", "qualname": "MarketplaceRequestArchivingProcessing.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">e</span>,</span><span class=\"param\">\t<span class=\"n\">request_type</span>,</span><span class=\"param\">\t<span class=\"n\">marketplace_account</span>,</span><span class=\"param\">\t<span class=\"n\">marketplace_step</span>,</span><span class=\"param\">\t<span class=\"n\">mp_request_signature</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.MarketplaceRequestArchivingProcessing.stop", "modulename": "node.main", "qualname": "MarketplaceRequestArchivingProcessing.stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.marketplace_request_archiving", "modulename": "node.main", "qualname": "marketplace_request_archiving", "kind": "function", "doc": "<p>sub function of MarketplaceRequestArchivingProcessing Class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.BacklogScoreProcessing", "modulename": "node.main", "qualname": "BacklogScoreProcessing", "kind": "class", "doc": "<p>Class to manage the backlog of request for refreshing score \nto avoid having more than 1 request for the same participant.</p>\n"}, {"fullname": "node.main.BacklogScoreProcessing.__init__", "modulename": "node.main", "qualname": "BacklogScoreProcessing.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "node.main.BacklogScoreProcessing.backlog", "modulename": "node.main", "qualname": "BacklogScoreProcessing.backlog", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.main.BacklogScoreProcessing.check_request", "modulename": "node.main", "qualname": "BacklogScoreProcessing.check_request", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">participant_public_key_hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.backlog_score_processing", "modulename": "node.main", "qualname": "backlog_score_processing", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;node.main.BacklogScoreProcessing object&gt;"}, {"fullname": "node.main.trigger_participant_refresh_score", "modulename": "node.main", "qualname": "trigger_participant_refresh_score", "kind": "function", "doc": "<p>trigger the refresh of the score of a participant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">participant_public_key_hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.ParticipantRefreshScoreProcessing", "modulename": "node.main", "qualname": "ParticipantRefreshScoreProcessing", "kind": "class", "doc": "<p>Class to process all the request to refresh the score of participant \nin parallel to avoid overloading triggered by function trigger_participant_refresh_score.</p>\n"}, {"fullname": "node.main.ParticipantRefreshScoreProcessing.__init__", "modulename": "node.main", "qualname": "ParticipantRefreshScoreProcessing.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "node.main.ParticipantRefreshScoreProcessing.e", "modulename": "node.main", "qualname": "ParticipantRefreshScoreProcessing.e", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.main.ParticipantRefreshScoreProcessing.launch", "modulename": "node.main", "qualname": "ParticipantRefreshScoreProcessing.launch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">participant_public_key_hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.ParticipantRefreshScoreProcessing.start", "modulename": "node.main", "qualname": "ParticipantRefreshScoreProcessing.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span>, </span><span class=\"param\"><span class=\"n\">participant_public_key_hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.ParticipantRefreshScoreProcessing.stop", "modulename": "node.main", "qualname": "ParticipantRefreshScoreProcessing.stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.participant_refresh_score", "modulename": "node.main", "qualname": "participant_refresh_score", "kind": "function", "doc": "<p>sub function of Class ParticipantRefreshScoreProcessing to refresh the score of a participant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.contest_refresh_ranking", "modulename": "node.main", "qualname": "contest_refresh_ranking", "kind": "function", "doc": "<p>get the ranking of all the participants.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.trigger_refresh_reputation", "modulename": "node.main", "qualname": "trigger_refresh_reputation", "kind": "function", "doc": "<p>trigger the refresh of the reputation of a participant.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">account_public_key_hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.RefreshReputationProcessing", "modulename": "node.main", "qualname": "RefreshReputationProcessing", "kind": "class", "doc": "<p>Class to process all the request to refresh the reputation of participant \nin parallel to avoid overloading triggered by function trigger_refresh_reputation.</p>\n"}, {"fullname": "node.main.RefreshReputationProcessing.__init__", "modulename": "node.main", "qualname": "RefreshReputationProcessing.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "node.main.RefreshReputationProcessing.e", "modulename": "node.main", "qualname": "RefreshReputationProcessing.e", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.main.RefreshReputationProcessing.launch", "modulename": "node.main", "qualname": "RefreshReputationProcessing.launch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account_public_key_hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.RefreshReputationProcessing.start", "modulename": "node.main", "qualname": "RefreshReputationProcessing.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span>, </span><span class=\"param\"><span class=\"n\">account_public_key_hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.RefreshReputationProcessing.stop", "modulename": "node.main", "qualname": "RefreshReputationProcessing.stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.refresh_reputation", "modulename": "node.main", "qualname": "refresh_reputation", "kind": "function", "doc": "<p>sub function of RefreshReputationProcessing Class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.helloworld", "modulename": "node.main", "qualname": "helloworld", "kind": "function", "doc": "<p>helloworld tutorial</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_user_all_utxos", "modulename": "node.main", "qualname": "get_user_all_utxos", "kind": "function", "doc": "<p>=&gt;function to be removed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_user_utxos_raw", "modulename": "node.main", "qualname": "get_user_utxos_raw", "kind": "function", "doc": "<p>=&gt;function to be removed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_user_utxos_account_temp", "modulename": "node.main", "qualname": "get_user_utxos_account_temp", "kind": "function", "doc": "<p>=&gt;function to be removed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_user_utxos_account_temp_payment_ref", "modulename": "node.main", "qualname": "get_user_utxos_account_temp_payment_ref", "kind": "function", "doc": "<p>=&gt;function to be removed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user</span>, </span><span class=\"param\"><span class=\"n\">payment_ref</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.encryption_test", "modulename": "node.main", "qualname": "encryption_test", "kind": "function", "doc": "<p>=&gt;function to be removed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.new_owner", "modulename": "node.main", "qualname": "new_owner", "kind": "function", "doc": "<p>=&gt;function to be removed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.get_marketplace_genesis", "modulename": "node.main", "qualname": "get_marketplace_genesis", "kind": "function", "doc": "<p>=&gt;function to be removed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.main.maintenance", "modulename": "node.main", "qualname": "maintenance", "kind": "function", "doc": "<p>=&gt;function to be removed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.miner_app", "modulename": "node.miner_app", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "node.miner_app.main", "modulename": "node.miner_app", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_creation", "modulename": "node.new_block_creation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "node.new_block_creation.new_block_creation", "modulename": "node.new_block_creation.new_block_creation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "node.new_block_creation.new_block_creation.BlockException", "modulename": "node.new_block_creation.new_block_creation", "qualname": "BlockException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "node.new_block_creation.new_block_creation.BlockException.__init__", "modulename": "node.new_block_creation.new_block_creation", "qualname": "BlockException.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expression</span>, </span><span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "node.new_block_creation.new_block_creation.BlockException.expression", "modulename": "node.new_block_creation.new_block_creation", "qualname": "BlockException.expression", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_creation.new_block_creation.BlockException.message", "modulename": "node.new_block_creation.new_block_creation", "qualname": "BlockException.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork", "kind": "class", "doc": "<p>Class to create a new block.</p>\n"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.__init__", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hostname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.hostname", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.hostname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.PoH_memory", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.PoH_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.known_nodes_memory", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.known_nodes_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.leader_node_schedule_memory", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.leader_node_schedule_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.mempool", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.mempool", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.testing_flag", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.testing_flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.start", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.get_noonce", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.get_noonce", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">block_header</span><span class=\"p\">:</span> <span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">block</span><span class=\"o\">.</span><span class=\"n\">BlockHeader</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.reload_blockchain", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.reload_blockchain", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.launch_new_block_creation", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.launch_new_block_creation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.next_leader_node_schedule", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.next_leader_node_schedule", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.ask_known_nodes_for_their_known_nodes", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.ask_known_nodes_for_their_known_nodes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.create_new_block", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.create_new_block", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current_leader_node_public_key_hash</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.get_transaction_fees", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.get_transaction_fees", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transactions</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.get_coinbase_transaction", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.get_coinbase_transaction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">transaction_fees</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">block_reward_percentage</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">public_key_hash</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">testing_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.get_vote_transaction", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.get_vote_transaction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.broadcast", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.broadcast", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_creation.new_block_creation.ProofOfWork.broadcast_leader_node_schedule", "modulename": "node.new_block_creation.new_block_creation", "qualname": "ProofOfWork.broadcast_leader_node_schedule", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation", "modulename": "node.new_block_validation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation", "modulename": "node.new_block_validation.new_block_validation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlockException", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlockException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlockException.__init__", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlockException.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expression</span>, </span><span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlockException.expression", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlockException.expression", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlockException.message", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlockException.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock", "kind": "class", "doc": "<p>Class to validate a new block.</p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.__init__", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">blockchain</span><span class=\"p\">:</span> <span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">block</span><span class=\"o\">.</span><span class=\"n\">Block</span>, </span><span class=\"param\"><span class=\"n\">hostname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.STORAGE_DIR", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.STORAGE_DIR", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.NEW_BLOCKCHAIN_DIR_BACKLOG", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.NEW_BLOCKCHAIN_DIR_BACKLOG", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.blockchain", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.blockchain", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.new_block", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.new_block", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.sender", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.sender", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.mempool", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.mempool", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.known_nodes_memory", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.known_nodes_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.blockchain_memory", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.blockchain_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.leader_node_schedule_memory", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.leader_node_schedule_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.master_state", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.master_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.hostname", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.hostname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.is_valid", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.is_valid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.refresh_score_list", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.refresh_score_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.receive", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.receive", "kind": "function", "doc": "<p>Validation of the block hash and Hash of PoH of the previous block\nraise an Error in case of issue\nOtherwise nothing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_block</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.validate", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.validate", "kind": "function", "doc": "<p>Launch several validations (hash, signature, PoH &amp; Transactions) of the block\nreturn self.is_valid = False if issue\nOtherwise nothing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">master_state_readiness</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.add_in_backlog", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.add_in_backlog", "kind": "function", "doc": "<p>store the block in a file in blockchain_backlog folder.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">master_state_readiness</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.clear_block_transactions_from_mempool", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.clear_block_transactions_from_mempool", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.vote", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.vote", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">smart_contract_account</span>, </span><span class=\"param\"><span class=\"n\">leader_node_flag</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.slash", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.slash", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">smart_contract_account</span>, </span><span class=\"param\"><span class=\"n\">leader_node_flag</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.validate_block_in_blockchain", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.validate_block_in_blockchain", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">smart_contract_account</span>, </span><span class=\"param\"><span class=\"n\">leader_node_flag</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.slash_block_in_blockchain", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.slash_block_in_blockchain", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">smart_contract_account</span>, </span><span class=\"param\"><span class=\"n\">leader_node_flag</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.raw_transaction", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.raw_transaction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">payload</span>, </span><span class=\"param\"><span class=\"n\">smart_contract_account</span>, </span><span class=\"param\"><span class=\"n\">leader_node_flag</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.manage_vote_book", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.manage_vote_book", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span>, </span><span class=\"param\"><span class=\"n\">block_PoH</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.check_vote_and_backlog", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.check_vote_and_backlog", "kind": "function", "doc": "<p>vote and check the backlog of block \nto include them if needed on the blockchain</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">master_state_readiness</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.process_smart_contract", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.process_smart_contract", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">block_PoH</span>,</span><span class=\"param\">\t<span class=\"n\">payload</span>,</span><span class=\"param\">\t<span class=\"n\">smart_contract_transaction_hash</span>,</span><span class=\"param\">\t<span class=\"n\">leader_node_flag</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.add_block_in_blockchain", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.add_block_in_blockchain", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">block_filename</span>, </span><span class=\"param\"><span class=\"n\">block_to_save</span>, </span><span class=\"param\"><span class=\"n\">latest_received_block</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.retrieve_block_detail", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.retrieve_block_detail", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">block_PoH</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.new_block_validation.new_block_validation.NewBlock.archive_block", "modulename": "node.new_block_validation.new_block_validation", "qualname": "NewBlock.archive_block", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">block_PoH</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation", "modulename": "node.transaction_validation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.script", "modulename": "node.transaction_validation.script", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.script.Stack", "modulename": "node.transaction_validation.script", "qualname": "Stack", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.script.Stack.elements", "modulename": "node.transaction_validation.script", "qualname": "Stack.elements", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.script.Stack.push", "modulename": "node.transaction_validation.script", "qualname": "Stack.push", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">element</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.Stack.pop", "modulename": "node.transaction_validation.script", "qualname": "Stack.pop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript", "modulename": "node.transaction_validation.script", "qualname": "StackScript", "kind": "class", "doc": "<p></p>\n", "bases": "Stack"}, {"fullname": "node.transaction_validation.script.StackScript.__init__", "modulename": "node.transaction_validation.script", "qualname": "StackScript.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">transaction_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "node.transaction_validation.script.StackScript.transaction_data", "modulename": "node.transaction_validation.script", "qualname": "StackScript.transaction_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.script.StackScript.op_dup", "modulename": "node.transaction_validation.script", "qualname": "StackScript.op_dup", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.op_hash160", "modulename": "node.transaction_validation.script", "qualname": "StackScript.op_hash160", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.op_equal_verify", "modulename": "node.transaction_validation.script", "qualname": "StackScript.op_equal_verify", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.op_checksig", "modulename": "node.transaction_validation.script", "qualname": "StackScript.op_checksig", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.op_account_temp", "modulename": "node.transaction_validation.script", "qualname": "StackScript.op_account_temp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.mp_amount", "modulename": "node.transaction_validation.script", "qualname": "StackScript.mp_amount", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.mp_payref", "modulename": "node.transaction_validation.script", "qualname": "StackScript.mp_payref", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.mp_marketplace_genesis", "modulename": "node.transaction_validation.script", "qualname": "StackScript.mp_marketplace_genesis", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.mp_marketplace_step0", "modulename": "node.transaction_validation.script", "qualname": "StackScript.mp_marketplace_step0", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.mp_marketplace_step1", "modulename": "node.transaction_validation.script", "qualname": "StackScript.mp_marketplace_step1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.mp_marketplace_step2", "modulename": "node.transaction_validation.script", "qualname": "StackScript.mp_marketplace_step2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.mp_marketplace_step3", "modulename": "node.transaction_validation.script", "qualname": "StackScript.mp_marketplace_step3", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.mp_marketplace_step4", "modulename": "node.transaction_validation.script", "qualname": "StackScript.mp_marketplace_step4", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.mp_cur", "modulename": "node.transaction_validation.script", "qualname": "StackScript.mp_cur", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.mp_nig", "modulename": "node.transaction_validation.script", "qualname": "StackScript.mp_nig", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.mp_nig_time", "modulename": "node.transaction_validation.script", "qualname": "StackScript.mp_nig_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.mp_public_key", "modulename": "node.transaction_validation.script", "qualname": "StackScript.mp_public_key", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.op_sc", "modulename": "node.transaction_validation.script", "qualname": "StackScript.op_sc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.op_del_sc", "modulename": "node.transaction_validation.script", "qualname": "StackScript.op_del_sc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.script.StackScript.op_re", "modulename": "node.transaction_validation.script", "qualname": "StackScript.op_re", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.transaction_validation", "modulename": "node.transaction_validation.transaction_validation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.TransactionException", "modulename": "node.transaction_validation.transaction_validation", "qualname": "TransactionException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "node.transaction_validation.transaction_validation.TransactionException.__init__", "modulename": "node.transaction_validation.transaction_validation", "qualname": "TransactionException.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expression</span>, </span><span class=\"param\"><span class=\"n\">message</span></span>)</span>"}, {"fullname": "node.transaction_validation.transaction_validation.TransactionException.expression", "modulename": "node.transaction_validation.transaction_validation", "qualname": "TransactionException.expression", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.TransactionException.message", "modulename": "node.transaction_validation.transaction_validation", "qualname": "TransactionException.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction", "kind": "class", "doc": "<p>Class to validate a transaction.</p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.__init__", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">blockchain</span><span class=\"p\">:</span> <span class=\"n\">common</span><span class=\"o\">.</span><span class=\"n\">block</span><span class=\"o\">.</span><span class=\"n\">Block</span>, </span><span class=\"param\"><span class=\"n\">hostname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.blockchain", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.blockchain", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.transaction_data", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.transaction_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.inputs", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.inputs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.outputs", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.outputs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.is_valid", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.is_valid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.is_funds_sufficient", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.is_funds_sufficient", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.is_smart_contract_valid", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.is_smart_contract_valid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.mempool", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.mempool", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.known_node_memory", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.known_node_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.leader_node_schedule_memory", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.leader_node_schedule_memory", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.sender", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.sender", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.hostname", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.hostname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.api_readonly_flag", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.api_readonly_flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.receive", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.receive", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transaction</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.validate_output_not_empty", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.validate_output_not_empty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.is_new", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.is_new", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.execute_script", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.execute_script", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unlocking_script</span>, </span><span class=\"param\"><span class=\"n\">locking_script</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.validate", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.validate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.get_total_amount_in_inputs", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.get_total_amount_in_inputs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.get_total_amount_in_outputs", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.get_total_amount_in_outputs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.get_total_fee_in_outputs", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.get_total_fee_in_outputs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.validate_funds", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.validate_funds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.broadcast_to_leader_node", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.broadcast_to_leader_node", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.store", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.store", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.add_to_PoH", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.add_to_PoH", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">PoH</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "node.transaction_validation.transaction_validation.Transaction.validate_smart_contract", "modulename": "node.transaction_validation.transaction_validation", "qualname": "Transaction.validate_smart_contract", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">smart_contract_index_list</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();